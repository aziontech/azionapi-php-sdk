<?php
/**
 * DefaultApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Edge Functions Instances API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'edgeFirewallEdgeFirewallIdFunctionsInstancesGet' => [
            'application/json',
        ],
        'edgeFirewallEdgeFirewallIdFunctionsInstancesPost' => [
            'application/json',
        ],
        'edgeFirewallEdgeFirewallIdFunctionsInstancesUuidDelete' => [
            'application/json',
        ],
        'edgeFirewallEdgeFirewallIdFunctionsInstancesUuidGet' => [
            'application/json',
        ],
        'edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatch' => [
            'application/json',
        ],
        'edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPut' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation edgeFirewallEdgeFirewallIdFunctionsInstancesGet
     *
     * List all user Edge Functions Instances
     *
     * @param  int $page page (optional)
     * @param  int $page_size page_size (optional)
     * @param  string $sort sort (optional)
     * @param  string $order_by order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ListEdgeFunctionsInstancesResponse
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesGet($page = null, $page_size = null, $sort = null, $order_by = null, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesGet'][0])
    {
        list($response) = $this->edgeFirewallEdgeFirewallIdFunctionsInstancesGetWithHttpInfo($page, $page_size, $sort, $order_by, $contentType);
        return $response;
    }

    /**
     * Operation edgeFirewallEdgeFirewallIdFunctionsInstancesGetWithHttpInfo
     *
     * List all user Edge Functions Instances
     *
     * @param  int $page (optional)
     * @param  int $page_size (optional)
     * @param  string $sort (optional)
     * @param  string $order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ListEdgeFunctionsInstancesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesGetWithHttpInfo($page = null, $page_size = null, $sort = null, $order_by = null, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesGet'][0])
    {
        $request = $this->edgeFirewallEdgeFirewallIdFunctionsInstancesGetRequest($page, $page_size, $sort, $order_by, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ListEdgeFunctionsInstancesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ListEdgeFunctionsInstancesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ListEdgeFunctionsInstancesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ListEdgeFunctionsInstancesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ListEdgeFunctionsInstancesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation edgeFirewallEdgeFirewallIdFunctionsInstancesGetAsync
     *
     * List all user Edge Functions Instances
     *
     * @param  int $page (optional)
     * @param  int $page_size (optional)
     * @param  string $sort (optional)
     * @param  string $order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesGetAsync($page = null, $page_size = null, $sort = null, $order_by = null, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesGet'][0])
    {
        return $this->edgeFirewallEdgeFirewallIdFunctionsInstancesGetAsyncWithHttpInfo($page, $page_size, $sort, $order_by, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation edgeFirewallEdgeFirewallIdFunctionsInstancesGetAsyncWithHttpInfo
     *
     * List all user Edge Functions Instances
     *
     * @param  int $page (optional)
     * @param  int $page_size (optional)
     * @param  string $sort (optional)
     * @param  string $order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesGetAsyncWithHttpInfo($page = null, $page_size = null, $sort = null, $order_by = null, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ListEdgeFunctionsInstancesResponse';
        $request = $this->edgeFirewallEdgeFirewallIdFunctionsInstancesGetRequest($page, $page_size, $sort, $order_by, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'edgeFirewallEdgeFirewallIdFunctionsInstancesGet'
     *
     * @param  int $page (optional)
     * @param  int $page_size (optional)
     * @param  string $sort (optional)
     * @param  string $order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesGetRequest($page = null, $page_size = null, $sort = null, $order_by = null, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesGet'][0])
    {






        $resourcePath = '/edge_firewall/:edge_firewall_id:/functions_instances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'order_by', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation edgeFirewallEdgeFirewallIdFunctionsInstancesPost
     *
     * Create an Edge Functions Instance
     *
     * @param  \OpenAPI\Client\Model\CreateEdgeFunctionsInstancesRequest $create_edge_functions_instances_request create_edge_functions_instances_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EdgeFunctionsInstanceResponse
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesPost($create_edge_functions_instances_request, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesPost'][0])
    {
        list($response) = $this->edgeFirewallEdgeFirewallIdFunctionsInstancesPostWithHttpInfo($create_edge_functions_instances_request, $contentType);
        return $response;
    }

    /**
     * Operation edgeFirewallEdgeFirewallIdFunctionsInstancesPostWithHttpInfo
     *
     * Create an Edge Functions Instance
     *
     * @param  \OpenAPI\Client\Model\CreateEdgeFunctionsInstancesRequest $create_edge_functions_instances_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EdgeFunctionsInstanceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesPostWithHttpInfo($create_edge_functions_instances_request, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesPost'][0])
    {
        $request = $this->edgeFirewallEdgeFirewallIdFunctionsInstancesPostRequest($create_edge_functions_instances_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\EdgeFunctionsInstanceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EdgeFunctionsInstanceResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EdgeFunctionsInstanceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EdgeFunctionsInstanceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EdgeFunctionsInstanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation edgeFirewallEdgeFirewallIdFunctionsInstancesPostAsync
     *
     * Create an Edge Functions Instance
     *
     * @param  \OpenAPI\Client\Model\CreateEdgeFunctionsInstancesRequest $create_edge_functions_instances_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesPostAsync($create_edge_functions_instances_request, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesPost'][0])
    {
        return $this->edgeFirewallEdgeFirewallIdFunctionsInstancesPostAsyncWithHttpInfo($create_edge_functions_instances_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation edgeFirewallEdgeFirewallIdFunctionsInstancesPostAsyncWithHttpInfo
     *
     * Create an Edge Functions Instance
     *
     * @param  \OpenAPI\Client\Model\CreateEdgeFunctionsInstancesRequest $create_edge_functions_instances_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesPostAsyncWithHttpInfo($create_edge_functions_instances_request, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EdgeFunctionsInstanceResponse';
        $request = $this->edgeFirewallEdgeFirewallIdFunctionsInstancesPostRequest($create_edge_functions_instances_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'edgeFirewallEdgeFirewallIdFunctionsInstancesPost'
     *
     * @param  \OpenAPI\Client\Model\CreateEdgeFunctionsInstancesRequest $create_edge_functions_instances_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesPostRequest($create_edge_functions_instances_request, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesPost'][0])
    {

        // verify the required parameter 'create_edge_functions_instances_request' is set
        if ($create_edge_functions_instances_request === null || (is_array($create_edge_functions_instances_request) && count($create_edge_functions_instances_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_edge_functions_instances_request when calling edgeFirewallEdgeFirewallIdFunctionsInstancesPost'
            );
        }


        $resourcePath = '/edge_firewall/:edge_firewall_id:/functions_instances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_edge_functions_instances_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_edge_functions_instances_request));
            } else {
                $httpBody = $create_edge_functions_instances_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation edgeFirewallEdgeFirewallIdFunctionsInstancesUuidDelete
     *
     * Delete an Edge Functions Instance by uuid
     *
     * @param  string $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesUuidDelete($uuid, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidDelete'][0])
    {
        $this->edgeFirewallEdgeFirewallIdFunctionsInstancesUuidDeleteWithHttpInfo($uuid, $contentType);
    }

    /**
     * Operation edgeFirewallEdgeFirewallIdFunctionsInstancesUuidDeleteWithHttpInfo
     *
     * Delete an Edge Functions Instance by uuid
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesUuidDeleteWithHttpInfo($uuid, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidDelete'][0])
    {
        $request = $this->edgeFirewallEdgeFirewallIdFunctionsInstancesUuidDeleteRequest($uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation edgeFirewallEdgeFirewallIdFunctionsInstancesUuidDeleteAsync
     *
     * Delete an Edge Functions Instance by uuid
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesUuidDeleteAsync($uuid, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidDelete'][0])
    {
        return $this->edgeFirewallEdgeFirewallIdFunctionsInstancesUuidDeleteAsyncWithHttpInfo($uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation edgeFirewallEdgeFirewallIdFunctionsInstancesUuidDeleteAsyncWithHttpInfo
     *
     * Delete an Edge Functions Instance by uuid
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesUuidDeleteAsyncWithHttpInfo($uuid, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidDelete'][0])
    {
        $returnType = '';
        $request = $this->edgeFirewallEdgeFirewallIdFunctionsInstancesUuidDeleteRequest($uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'edgeFirewallEdgeFirewallIdFunctionsInstancesUuidDelete'
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesUuidDeleteRequest($uuid, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidDelete'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling edgeFirewallEdgeFirewallIdFunctionsInstancesUuidDelete'
            );
        }


        $resourcePath = '/edge_firewall/:edge_firewall_id:/functions_instances/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation edgeFirewallEdgeFirewallIdFunctionsInstancesUuidGet
     *
     * Retrieve an Edge Functions Instance set by uuid
     *
     * @param  string $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EdgeFunctionsInstanceResponse
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesUuidGet($uuid, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidGet'][0])
    {
        list($response) = $this->edgeFirewallEdgeFirewallIdFunctionsInstancesUuidGetWithHttpInfo($uuid, $contentType);
        return $response;
    }

    /**
     * Operation edgeFirewallEdgeFirewallIdFunctionsInstancesUuidGetWithHttpInfo
     *
     * Retrieve an Edge Functions Instance set by uuid
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EdgeFunctionsInstanceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesUuidGetWithHttpInfo($uuid, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidGet'][0])
    {
        $request = $this->edgeFirewallEdgeFirewallIdFunctionsInstancesUuidGetRequest($uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EdgeFunctionsInstanceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EdgeFunctionsInstanceResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EdgeFunctionsInstanceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EdgeFunctionsInstanceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EdgeFunctionsInstanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation edgeFirewallEdgeFirewallIdFunctionsInstancesUuidGetAsync
     *
     * Retrieve an Edge Functions Instance set by uuid
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesUuidGetAsync($uuid, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidGet'][0])
    {
        return $this->edgeFirewallEdgeFirewallIdFunctionsInstancesUuidGetAsyncWithHttpInfo($uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation edgeFirewallEdgeFirewallIdFunctionsInstancesUuidGetAsyncWithHttpInfo
     *
     * Retrieve an Edge Functions Instance set by uuid
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesUuidGetAsyncWithHttpInfo($uuid, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EdgeFunctionsInstanceResponse';
        $request = $this->edgeFirewallEdgeFirewallIdFunctionsInstancesUuidGetRequest($uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'edgeFirewallEdgeFirewallIdFunctionsInstancesUuidGet'
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesUuidGetRequest($uuid, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidGet'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling edgeFirewallEdgeFirewallIdFunctionsInstancesUuidGet'
            );
        }


        $resourcePath = '/edge_firewall/:edge_firewall_id:/functions_instances/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatch
     *
     * Update some Edge Functions Instance attributes
     *
     * @param  string $uuid uuid (required)
     * @param  \OpenAPI\Client\Model\CreateEdgeFunctionsInstancesRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EdgeFunctionsInstanceResponse
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatch($uuid, $body, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatch'][0])
    {
        list($response) = $this->edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatchWithHttpInfo($uuid, $body, $contentType);
        return $response;
    }

    /**
     * Operation edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatchWithHttpInfo
     *
     * Update some Edge Functions Instance attributes
     *
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\CreateEdgeFunctionsInstancesRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EdgeFunctionsInstanceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatchWithHttpInfo($uuid, $body, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatch'][0])
    {
        $request = $this->edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatchRequest($uuid, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EdgeFunctionsInstanceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EdgeFunctionsInstanceResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EdgeFunctionsInstanceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EdgeFunctionsInstanceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EdgeFunctionsInstanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatchAsync
     *
     * Update some Edge Functions Instance attributes
     *
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\CreateEdgeFunctionsInstancesRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatchAsync($uuid, $body, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatch'][0])
    {
        return $this->edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatchAsyncWithHttpInfo($uuid, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatchAsyncWithHttpInfo
     *
     * Update some Edge Functions Instance attributes
     *
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\CreateEdgeFunctionsInstancesRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatchAsyncWithHttpInfo($uuid, $body, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatch'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EdgeFunctionsInstanceResponse';
        $request = $this->edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatchRequest($uuid, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatch'
     *
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\CreateEdgeFunctionsInstancesRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatchRequest($uuid, $body, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatch'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatch'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatch'
            );
        }


        $resourcePath = '/edge_firewall/:edge_firewall_id:/functions_instances/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPut
     *
     * Overwrite some Edge Functions Instance attributes
     *
     * @param  string $uuid uuid (required)
     * @param  \OpenAPI\Client\Model\CreateEdgeFunctionsInstancesRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EdgeFunctionsInstanceResponse
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPut($uuid, $body, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPut'][0])
    {
        list($response) = $this->edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPutWithHttpInfo($uuid, $body, $contentType);
        return $response;
    }

    /**
     * Operation edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPutWithHttpInfo
     *
     * Overwrite some Edge Functions Instance attributes
     *
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\CreateEdgeFunctionsInstancesRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EdgeFunctionsInstanceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPutWithHttpInfo($uuid, $body, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPut'][0])
    {
        $request = $this->edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPutRequest($uuid, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EdgeFunctionsInstanceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EdgeFunctionsInstanceResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EdgeFunctionsInstanceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EdgeFunctionsInstanceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EdgeFunctionsInstanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPutAsync
     *
     * Overwrite some Edge Functions Instance attributes
     *
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\CreateEdgeFunctionsInstancesRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPutAsync($uuid, $body, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPut'][0])
    {
        return $this->edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPutAsyncWithHttpInfo($uuid, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPutAsyncWithHttpInfo
     *
     * Overwrite some Edge Functions Instance attributes
     *
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\CreateEdgeFunctionsInstancesRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPutAsyncWithHttpInfo($uuid, $body, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EdgeFunctionsInstanceResponse';
        $request = $this->edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPutRequest($uuid, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPut'
     *
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\CreateEdgeFunctionsInstancesRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPutRequest($uuid, $body, string $contentType = self::contentTypes['edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPut'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPut'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling edgeFirewallEdgeFirewallIdFunctionsInstancesUuidPut'
            );
        }


        $resourcePath = '/edge_firewall/:edge_firewall_id:/functions_instances/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
