<?php
/**
 * CreateApplicationRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Edge Application API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CreateApplicationRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateApplicationRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateApplicationRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'application_acceleration' => 'bool',
        'delivery_protocol' => 'string',
        'origin_type' => 'string',
        'address' => 'string',
        'minimum_tls_version' => 'string',
        'origin_protocol_policy' => 'string',
        'host_header' => 'string',
        'browser_cache_settings' => 'string',
        'cdn_cache_settings' => 'string',
        'browser_cache_settings_maximum_ttl' => 'int',
        'cdn_cache_settings_maximum_ttl' => 'int',
        'debug_rules' => 'bool',
        'supported_ciphers' => 'string',
        'http_port' => 'mixed',
        'https_port' => 'mixed',
        'l2_caching' => 'bool',
        'http3' => 'bool',
        'websocket' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'application_acceleration' => null,
        'delivery_protocol' => null,
        'origin_type' => null,
        'address' => null,
        'minimum_tls_version' => null,
        'origin_protocol_policy' => null,
        'host_header' => null,
        'browser_cache_settings' => null,
        'cdn_cache_settings' => null,
        'browser_cache_settings_maximum_ttl' => 'int64',
        'cdn_cache_settings_maximum_ttl' => 'int64',
        'debug_rules' => null,
        'supported_ciphers' => null,
        'http_port' => null,
        'https_port' => null,
        'l2_caching' => null,
        'http3' => null,
        'websocket' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'application_acceleration' => false,
        'delivery_protocol' => false,
        'origin_type' => false,
        'address' => false,
        'minimum_tls_version' => false,
        'origin_protocol_policy' => false,
        'host_header' => false,
        'browser_cache_settings' => false,
        'cdn_cache_settings' => false,
        'browser_cache_settings_maximum_ttl' => false,
        'cdn_cache_settings_maximum_ttl' => false,
        'debug_rules' => false,
        'supported_ciphers' => false,
        'http_port' => true,
        'https_port' => true,
        'l2_caching' => false,
        'http3' => false,
        'websocket' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'application_acceleration' => 'application_acceleration',
        'delivery_protocol' => 'delivery_protocol',
        'origin_type' => 'origin_type',
        'address' => 'address',
        'minimum_tls_version' => 'minimum_tls_version',
        'origin_protocol_policy' => 'origin_protocol_policy',
        'host_header' => 'host_header',
        'browser_cache_settings' => 'browser_cache_settings',
        'cdn_cache_settings' => 'cdn_cache_settings',
        'browser_cache_settings_maximum_ttl' => 'browser_cache_settings_maximum_ttl',
        'cdn_cache_settings_maximum_ttl' => 'cdn_cache_settings_maximum_ttl',
        'debug_rules' => 'debug_rules',
        'supported_ciphers' => 'supported_ciphers',
        'http_port' => 'http_port',
        'https_port' => 'https_port',
        'l2_caching' => 'l2_caching',
        'http3' => 'http3',
        'websocket' => 'websocket'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'application_acceleration' => 'setApplicationAcceleration',
        'delivery_protocol' => 'setDeliveryProtocol',
        'origin_type' => 'setOriginType',
        'address' => 'setAddress',
        'minimum_tls_version' => 'setMinimumTlsVersion',
        'origin_protocol_policy' => 'setOriginProtocolPolicy',
        'host_header' => 'setHostHeader',
        'browser_cache_settings' => 'setBrowserCacheSettings',
        'cdn_cache_settings' => 'setCdnCacheSettings',
        'browser_cache_settings_maximum_ttl' => 'setBrowserCacheSettingsMaximumTtl',
        'cdn_cache_settings_maximum_ttl' => 'setCdnCacheSettingsMaximumTtl',
        'debug_rules' => 'setDebugRules',
        'supported_ciphers' => 'setSupportedCiphers',
        'http_port' => 'setHttpPort',
        'https_port' => 'setHttpsPort',
        'l2_caching' => 'setL2Caching',
        'http3' => 'setHttp3',
        'websocket' => 'setWebsocket'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'application_acceleration' => 'getApplicationAcceleration',
        'delivery_protocol' => 'getDeliveryProtocol',
        'origin_type' => 'getOriginType',
        'address' => 'getAddress',
        'minimum_tls_version' => 'getMinimumTlsVersion',
        'origin_protocol_policy' => 'getOriginProtocolPolicy',
        'host_header' => 'getHostHeader',
        'browser_cache_settings' => 'getBrowserCacheSettings',
        'cdn_cache_settings' => 'getCdnCacheSettings',
        'browser_cache_settings_maximum_ttl' => 'getBrowserCacheSettingsMaximumTtl',
        'cdn_cache_settings_maximum_ttl' => 'getCdnCacheSettingsMaximumTtl',
        'debug_rules' => 'getDebugRules',
        'supported_ciphers' => 'getSupportedCiphers',
        'http_port' => 'getHttpPort',
        'https_port' => 'getHttpsPort',
        'l2_caching' => 'getL2Caching',
        'http3' => 'getHttp3',
        'websocket' => 'getWebsocket'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('application_acceleration', $data ?? [], null);
        $this->setIfExists('delivery_protocol', $data ?? [], null);
        $this->setIfExists('origin_type', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('minimum_tls_version', $data ?? [], null);
        $this->setIfExists('origin_protocol_policy', $data ?? [], null);
        $this->setIfExists('host_header', $data ?? [], null);
        $this->setIfExists('browser_cache_settings', $data ?? [], null);
        $this->setIfExists('cdn_cache_settings', $data ?? [], null);
        $this->setIfExists('browser_cache_settings_maximum_ttl', $data ?? [], null);
        $this->setIfExists('cdn_cache_settings_maximum_ttl', $data ?? [], null);
        $this->setIfExists('debug_rules', $data ?? [], null);
        $this->setIfExists('supported_ciphers', $data ?? [], null);
        $this->setIfExists('http_port', $data ?? [], null);
        $this->setIfExists('https_port', $data ?? [], null);
        $this->setIfExists('l2_caching', $data ?? [], null);
        $this->setIfExists('http3', $data ?? [], null);
        $this->setIfExists('websocket', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets application_acceleration
     *
     * @return bool|null
     */
    public function getApplicationAcceleration()
    {
        return $this->container['application_acceleration'];
    }

    /**
     * Sets application_acceleration
     *
     * @param bool|null $application_acceleration application_acceleration
     *
     * @return self
     */
    public function setApplicationAcceleration($application_acceleration)
    {
        if (is_null($application_acceleration)) {
            throw new \InvalidArgumentException('non-nullable application_acceleration cannot be null');
        }
        $this->container['application_acceleration'] = $application_acceleration;

        return $this;
    }

    /**
     * Gets delivery_protocol
     *
     * @return string|null
     */
    public function getDeliveryProtocol()
    {
        return $this->container['delivery_protocol'];
    }

    /**
     * Sets delivery_protocol
     *
     * @param string|null $delivery_protocol delivery_protocol
     *
     * @return self
     */
    public function setDeliveryProtocol($delivery_protocol)
    {
        if (is_null($delivery_protocol)) {
            throw new \InvalidArgumentException('non-nullable delivery_protocol cannot be null');
        }
        $this->container['delivery_protocol'] = $delivery_protocol;

        return $this;
    }

    /**
     * Gets origin_type
     *
     * @return string|null
     */
    public function getOriginType()
    {
        return $this->container['origin_type'];
    }

    /**
     * Sets origin_type
     *
     * @param string|null $origin_type origin_type
     *
     * @return self
     */
    public function setOriginType($origin_type)
    {
        if (is_null($origin_type)) {
            throw new \InvalidArgumentException('non-nullable origin_type cannot be null');
        }
        $this->container['origin_type'] = $origin_type;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets minimum_tls_version
     *
     * @return string|null
     */
    public function getMinimumTlsVersion()
    {
        return $this->container['minimum_tls_version'];
    }

    /**
     * Sets minimum_tls_version
     *
     * @param string|null $minimum_tls_version minimum_tls_version
     *
     * @return self
     */
    public function setMinimumTlsVersion($minimum_tls_version)
    {
        if (is_null($minimum_tls_version)) {
            throw new \InvalidArgumentException('non-nullable minimum_tls_version cannot be null');
        }
        $this->container['minimum_tls_version'] = $minimum_tls_version;

        return $this;
    }

    /**
     * Gets origin_protocol_policy
     *
     * @return string|null
     */
    public function getOriginProtocolPolicy()
    {
        return $this->container['origin_protocol_policy'];
    }

    /**
     * Sets origin_protocol_policy
     *
     * @param string|null $origin_protocol_policy origin_protocol_policy
     *
     * @return self
     */
    public function setOriginProtocolPolicy($origin_protocol_policy)
    {
        if (is_null($origin_protocol_policy)) {
            throw new \InvalidArgumentException('non-nullable origin_protocol_policy cannot be null');
        }
        $this->container['origin_protocol_policy'] = $origin_protocol_policy;

        return $this;
    }

    /**
     * Gets host_header
     *
     * @return string|null
     */
    public function getHostHeader()
    {
        return $this->container['host_header'];
    }

    /**
     * Sets host_header
     *
     * @param string|null $host_header host_header
     *
     * @return self
     */
    public function setHostHeader($host_header)
    {
        if (is_null($host_header)) {
            throw new \InvalidArgumentException('non-nullable host_header cannot be null');
        }
        $this->container['host_header'] = $host_header;

        return $this;
    }

    /**
     * Gets browser_cache_settings
     *
     * @return string|null
     */
    public function getBrowserCacheSettings()
    {
        return $this->container['browser_cache_settings'];
    }

    /**
     * Sets browser_cache_settings
     *
     * @param string|null $browser_cache_settings browser_cache_settings
     *
     * @return self
     */
    public function setBrowserCacheSettings($browser_cache_settings)
    {
        if (is_null($browser_cache_settings)) {
            throw new \InvalidArgumentException('non-nullable browser_cache_settings cannot be null');
        }
        $this->container['browser_cache_settings'] = $browser_cache_settings;

        return $this;
    }

    /**
     * Gets cdn_cache_settings
     *
     * @return string|null
     */
    public function getCdnCacheSettings()
    {
        return $this->container['cdn_cache_settings'];
    }

    /**
     * Sets cdn_cache_settings
     *
     * @param string|null $cdn_cache_settings cdn_cache_settings
     *
     * @return self
     */
    public function setCdnCacheSettings($cdn_cache_settings)
    {
        if (is_null($cdn_cache_settings)) {
            throw new \InvalidArgumentException('non-nullable cdn_cache_settings cannot be null');
        }
        $this->container['cdn_cache_settings'] = $cdn_cache_settings;

        return $this;
    }

    /**
     * Gets browser_cache_settings_maximum_ttl
     *
     * @return int|null
     */
    public function getBrowserCacheSettingsMaximumTtl()
    {
        return $this->container['browser_cache_settings_maximum_ttl'];
    }

    /**
     * Sets browser_cache_settings_maximum_ttl
     *
     * @param int|null $browser_cache_settings_maximum_ttl browser_cache_settings_maximum_ttl
     *
     * @return self
     */
    public function setBrowserCacheSettingsMaximumTtl($browser_cache_settings_maximum_ttl)
    {
        if (is_null($browser_cache_settings_maximum_ttl)) {
            throw new \InvalidArgumentException('non-nullable browser_cache_settings_maximum_ttl cannot be null');
        }
        $this->container['browser_cache_settings_maximum_ttl'] = $browser_cache_settings_maximum_ttl;

        return $this;
    }

    /**
     * Gets cdn_cache_settings_maximum_ttl
     *
     * @return int|null
     */
    public function getCdnCacheSettingsMaximumTtl()
    {
        return $this->container['cdn_cache_settings_maximum_ttl'];
    }

    /**
     * Sets cdn_cache_settings_maximum_ttl
     *
     * @param int|null $cdn_cache_settings_maximum_ttl cdn_cache_settings_maximum_ttl
     *
     * @return self
     */
    public function setCdnCacheSettingsMaximumTtl($cdn_cache_settings_maximum_ttl)
    {
        if (is_null($cdn_cache_settings_maximum_ttl)) {
            throw new \InvalidArgumentException('non-nullable cdn_cache_settings_maximum_ttl cannot be null');
        }
        $this->container['cdn_cache_settings_maximum_ttl'] = $cdn_cache_settings_maximum_ttl;

        return $this;
    }

    /**
     * Gets debug_rules
     *
     * @return bool|null
     */
    public function getDebugRules()
    {
        return $this->container['debug_rules'];
    }

    /**
     * Sets debug_rules
     *
     * @param bool|null $debug_rules debug_rules
     *
     * @return self
     */
    public function setDebugRules($debug_rules)
    {
        if (is_null($debug_rules)) {
            throw new \InvalidArgumentException('non-nullable debug_rules cannot be null');
        }
        $this->container['debug_rules'] = $debug_rules;

        return $this;
    }

    /**
     * Gets supported_ciphers
     *
     * @return string|null
     */
    public function getSupportedCiphers()
    {
        return $this->container['supported_ciphers'];
    }

    /**
     * Sets supported_ciphers
     *
     * @param string|null $supported_ciphers supported_ciphers
     *
     * @return self
     */
    public function setSupportedCiphers($supported_ciphers)
    {
        if (is_null($supported_ciphers)) {
            throw new \InvalidArgumentException('non-nullable supported_ciphers cannot be null');
        }
        $this->container['supported_ciphers'] = $supported_ciphers;

        return $this;
    }

    /**
     * Gets http_port
     *
     * @return mixed|null
     */
    public function getHttpPort()
    {
        return $this->container['http_port'];
    }

    /**
     * Sets http_port
     *
     * @param mixed|null $http_port http_port
     *
     * @return self
     */
    public function setHttpPort($http_port)
    {
        if (is_null($http_port)) {
            array_push($this->openAPINullablesSetToNull, 'http_port');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('http_port', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['http_port'] = $http_port;

        return $this;
    }

    /**
     * Gets https_port
     *
     * @return mixed|null
     */
    public function getHttpsPort()
    {
        return $this->container['https_port'];
    }

    /**
     * Sets https_port
     *
     * @param mixed|null $https_port https_port
     *
     * @return self
     */
    public function setHttpsPort($https_port)
    {
        if (is_null($https_port)) {
            array_push($this->openAPINullablesSetToNull, 'https_port');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('https_port', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['https_port'] = $https_port;

        return $this;
    }

    /**
     * Gets l2_caching
     *
     * @return bool|null
     */
    public function getL2Caching()
    {
        return $this->container['l2_caching'];
    }

    /**
     * Sets l2_caching
     *
     * @param bool|null $l2_caching l2_caching
     *
     * @return self
     */
    public function setL2Caching($l2_caching)
    {
        if (is_null($l2_caching)) {
            throw new \InvalidArgumentException('non-nullable l2_caching cannot be null');
        }
        $this->container['l2_caching'] = $l2_caching;

        return $this;
    }

    /**
     * Gets http3
     *
     * @return bool|null
     */
    public function getHttp3()
    {
        return $this->container['http3'];
    }

    /**
     * Sets http3
     *
     * @param bool|null $http3 http3
     *
     * @return self
     */
    public function setHttp3($http3)
    {
        if (is_null($http3)) {
            throw new \InvalidArgumentException('non-nullable http3 cannot be null');
        }
        $this->container['http3'] = $http3;

        return $this;
    }

    /**
     * Gets websocket
     *
     * @return bool|null
     */
    public function getWebsocket()
    {
        return $this->container['websocket'];
    }

    /**
     * Sets websocket
     *
     * @param bool|null $websocket websocket
     *
     * @return self
     */
    public function setWebsocket($websocket)
    {
        if (is_null($websocket)) {
            throw new \InvalidArgumentException('non-nullable websocket cannot be null');
        }
        $this->container['websocket'] = $websocket;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


