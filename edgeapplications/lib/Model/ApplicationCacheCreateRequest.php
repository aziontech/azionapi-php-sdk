<?php
/**
 * ApplicationCacheCreateRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Edge Application API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ApplicationCacheCreateRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApplicationCacheCreateRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ApplicationCacheCreateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'browser_cache_settings' => 'string',
        'browser_cache_settings_maximum_ttl' => 'int',
        'cdn_cache_settings' => 'string',
        'cdn_cache_settings_maximum_ttl' => 'int',
        'cache_by_query_string' => 'string',
        'query_string_fields' => 'string[]',
        'enable_query_string_sort' => 'bool',
        'cache_by_cookies' => 'string',
        'cookie_names' => 'string[]',
        'user_email' => 'string',
        'l2_caching_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'browser_cache_settings' => null,
        'browser_cache_settings_maximum_ttl' => 'int64',
        'cdn_cache_settings' => null,
        'cdn_cache_settings_maximum_ttl' => 'int64',
        'cache_by_query_string' => null,
        'query_string_fields' => null,
        'enable_query_string_sort' => null,
        'cache_by_cookies' => null,
        'cookie_names' => null,
        'user_email' => null,
        'l2_caching_enabled' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
		'browser_cache_settings' => false,
		'browser_cache_settings_maximum_ttl' => false,
		'cdn_cache_settings' => false,
		'cdn_cache_settings_maximum_ttl' => false,
		'cache_by_query_string' => false,
		'query_string_fields' => true,
		'enable_query_string_sort' => false,
		'cache_by_cookies' => false,
		'cookie_names' => true,
		'user_email' => false,
		'l2_caching_enabled' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'browser_cache_settings' => 'browser_cache_settings',
        'browser_cache_settings_maximum_ttl' => 'browser_cache_settings_maximum_ttl',
        'cdn_cache_settings' => 'cdn_cache_settings',
        'cdn_cache_settings_maximum_ttl' => 'cdn_cache_settings_maximum_ttl',
        'cache_by_query_string' => 'cache_by_query_string',
        'query_string_fields' => 'query_string_fields',
        'enable_query_string_sort' => 'enable_query_string_sort',
        'cache_by_cookies' => 'cache_by_cookies',
        'cookie_names' => 'cookie_names',
        'user_email' => 'user_email',
        'l2_caching_enabled' => 'l2_caching_enabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'browser_cache_settings' => 'setBrowserCacheSettings',
        'browser_cache_settings_maximum_ttl' => 'setBrowserCacheSettingsMaximumTtl',
        'cdn_cache_settings' => 'setCdnCacheSettings',
        'cdn_cache_settings_maximum_ttl' => 'setCdnCacheSettingsMaximumTtl',
        'cache_by_query_string' => 'setCacheByQueryString',
        'query_string_fields' => 'setQueryStringFields',
        'enable_query_string_sort' => 'setEnableQueryStringSort',
        'cache_by_cookies' => 'setCacheByCookies',
        'cookie_names' => 'setCookieNames',
        'user_email' => 'setUserEmail',
        'l2_caching_enabled' => 'setL2CachingEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'browser_cache_settings' => 'getBrowserCacheSettings',
        'browser_cache_settings_maximum_ttl' => 'getBrowserCacheSettingsMaximumTtl',
        'cdn_cache_settings' => 'getCdnCacheSettings',
        'cdn_cache_settings_maximum_ttl' => 'getCdnCacheSettingsMaximumTtl',
        'cache_by_query_string' => 'getCacheByQueryString',
        'query_string_fields' => 'getQueryStringFields',
        'enable_query_string_sort' => 'getEnableQueryStringSort',
        'cache_by_cookies' => 'getCacheByCookies',
        'cookie_names' => 'getCookieNames',
        'user_email' => 'getUserEmail',
        'l2_caching_enabled' => 'getL2CachingEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('browser_cache_settings', $data ?? [], null);
        $this->setIfExists('browser_cache_settings_maximum_ttl', $data ?? [], null);
        $this->setIfExists('cdn_cache_settings', $data ?? [], null);
        $this->setIfExists('cdn_cache_settings_maximum_ttl', $data ?? [], null);
        $this->setIfExists('cache_by_query_string', $data ?? [], null);
        $this->setIfExists('query_string_fields', $data ?? [], null);
        $this->setIfExists('enable_query_string_sort', $data ?? [], null);
        $this->setIfExists('cache_by_cookies', $data ?? [], null);
        $this->setIfExists('cookie_names', $data ?? [], null);
        $this->setIfExists('user_email', $data ?? [], null);
        $this->setIfExists('l2_caching_enabled', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets browser_cache_settings
     *
     * @return string|null
     */
    public function getBrowserCacheSettings()
    {
        return $this->container['browser_cache_settings'];
    }

    /**
     * Sets browser_cache_settings
     *
     * @param string|null $browser_cache_settings browser_cache_settings
     *
     * @return self
     */
    public function setBrowserCacheSettings($browser_cache_settings)
    {
        if (is_null($browser_cache_settings)) {
            throw new \InvalidArgumentException('non-nullable browser_cache_settings cannot be null');
        }
        $this->container['browser_cache_settings'] = $browser_cache_settings;

        return $this;
    }

    /**
     * Gets browser_cache_settings_maximum_ttl
     *
     * @return int|null
     */
    public function getBrowserCacheSettingsMaximumTtl()
    {
        return $this->container['browser_cache_settings_maximum_ttl'];
    }

    /**
     * Sets browser_cache_settings_maximum_ttl
     *
     * @param int|null $browser_cache_settings_maximum_ttl browser_cache_settings_maximum_ttl
     *
     * @return self
     */
    public function setBrowserCacheSettingsMaximumTtl($browser_cache_settings_maximum_ttl)
    {
        if (is_null($browser_cache_settings_maximum_ttl)) {
            throw new \InvalidArgumentException('non-nullable browser_cache_settings_maximum_ttl cannot be null');
        }
        $this->container['browser_cache_settings_maximum_ttl'] = $browser_cache_settings_maximum_ttl;

        return $this;
    }

    /**
     * Gets cdn_cache_settings
     *
     * @return string|null
     */
    public function getCdnCacheSettings()
    {
        return $this->container['cdn_cache_settings'];
    }

    /**
     * Sets cdn_cache_settings
     *
     * @param string|null $cdn_cache_settings cdn_cache_settings
     *
     * @return self
     */
    public function setCdnCacheSettings($cdn_cache_settings)
    {
        if (is_null($cdn_cache_settings)) {
            throw new \InvalidArgumentException('non-nullable cdn_cache_settings cannot be null');
        }
        $this->container['cdn_cache_settings'] = $cdn_cache_settings;

        return $this;
    }

    /**
     * Gets cdn_cache_settings_maximum_ttl
     *
     * @return int|null
     */
    public function getCdnCacheSettingsMaximumTtl()
    {
        return $this->container['cdn_cache_settings_maximum_ttl'];
    }

    /**
     * Sets cdn_cache_settings_maximum_ttl
     *
     * @param int|null $cdn_cache_settings_maximum_ttl cdn_cache_settings_maximum_ttl
     *
     * @return self
     */
    public function setCdnCacheSettingsMaximumTtl($cdn_cache_settings_maximum_ttl)
    {
        if (is_null($cdn_cache_settings_maximum_ttl)) {
            throw new \InvalidArgumentException('non-nullable cdn_cache_settings_maximum_ttl cannot be null');
        }
        $this->container['cdn_cache_settings_maximum_ttl'] = $cdn_cache_settings_maximum_ttl;

        return $this;
    }

    /**
     * Gets cache_by_query_string
     *
     * @return string|null
     */
    public function getCacheByQueryString()
    {
        return $this->container['cache_by_query_string'];
    }

    /**
     * Sets cache_by_query_string
     *
     * @param string|null $cache_by_query_string cache_by_query_string
     *
     * @return self
     */
    public function setCacheByQueryString($cache_by_query_string)
    {
        if (is_null($cache_by_query_string)) {
            throw new \InvalidArgumentException('non-nullable cache_by_query_string cannot be null');
        }
        $this->container['cache_by_query_string'] = $cache_by_query_string;

        return $this;
    }

    /**
     * Gets query_string_fields
     *
     * @return string[]|null
     */
    public function getQueryStringFields()
    {
        return $this->container['query_string_fields'];
    }

    /**
     * Sets query_string_fields
     *
     * @param string[]|null $query_string_fields query_string_fields
     *
     * @return self
     */
    public function setQueryStringFields($query_string_fields)
    {
        if (is_null($query_string_fields)) {
            array_push($this->openAPINullablesSetToNull, 'query_string_fields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('query_string_fields', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['query_string_fields'] = $query_string_fields;

        return $this;
    }

    /**
     * Gets enable_query_string_sort
     *
     * @return bool|null
     */
    public function getEnableQueryStringSort()
    {
        return $this->container['enable_query_string_sort'];
    }

    /**
     * Sets enable_query_string_sort
     *
     * @param bool|null $enable_query_string_sort enable_query_string_sort
     *
     * @return self
     */
    public function setEnableQueryStringSort($enable_query_string_sort)
    {
        if (is_null($enable_query_string_sort)) {
            throw new \InvalidArgumentException('non-nullable enable_query_string_sort cannot be null');
        }
        $this->container['enable_query_string_sort'] = $enable_query_string_sort;

        return $this;
    }

    /**
     * Gets cache_by_cookies
     *
     * @return string|null
     */
    public function getCacheByCookies()
    {
        return $this->container['cache_by_cookies'];
    }

    /**
     * Sets cache_by_cookies
     *
     * @param string|null $cache_by_cookies cache_by_cookies
     *
     * @return self
     */
    public function setCacheByCookies($cache_by_cookies)
    {
        if (is_null($cache_by_cookies)) {
            throw new \InvalidArgumentException('non-nullable cache_by_cookies cannot be null');
        }
        $this->container['cache_by_cookies'] = $cache_by_cookies;

        return $this;
    }

    /**
     * Gets cookie_names
     *
     * @return string[]|null
     */
    public function getCookieNames()
    {
        return $this->container['cookie_names'];
    }

    /**
     * Sets cookie_names
     *
     * @param string[]|null $cookie_names cookie_names
     *
     * @return self
     */
    public function setCookieNames($cookie_names)
    {
        if (is_null($cookie_names)) {
            array_push($this->openAPINullablesSetToNull, 'cookie_names');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cookie_names', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cookie_names'] = $cookie_names;

        return $this;
    }

    /**
     * Gets user_email
     *
     * @return string|null
     */
    public function getUserEmail()
    {
        return $this->container['user_email'];
    }

    /**
     * Sets user_email
     *
     * @param string|null $user_email user_email
     *
     * @return self
     */
    public function setUserEmail($user_email)
    {
        if (is_null($user_email)) {
            throw new \InvalidArgumentException('non-nullable user_email cannot be null');
        }
        $this->container['user_email'] = $user_email;

        return $this;
    }

    /**
     * Gets l2_caching_enabled
     *
     * @return bool|null
     */
    public function getL2CachingEnabled()
    {
        return $this->container['l2_caching_enabled'];
    }

    /**
     * Sets l2_caching_enabled
     *
     * @param bool|null $l2_caching_enabled l2_caching_enabled
     *
     * @return self
     */
    public function setL2CachingEnabled($l2_caching_enabled)
    {
        if (is_null($l2_caching_enabled)) {
            throw new \InvalidArgumentException('non-nullable l2_caching_enabled cannot be null');
        }
        $this->container['l2_caching_enabled'] = $l2_caching_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


