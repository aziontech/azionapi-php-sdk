<?php
/**
 * DataStreamingApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Data Streaming - OpenAPI
 *
 * The Data Streaming API allows you to manage your existing data streamings and templates. Data Streaming allows you to feed your stream processing, SIEM, and big data platforms with the event logs from your applications on Azion in real time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * DataStreamingApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DataStreamingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createNewDataStreaming' => [
            'application/json',
        ],
        'deleteDataStreamingById' => [
            'application/json',
        ],
        'editDataStreamingById' => [
            'application/json',
        ],
        'listDataStreamingById' => [
            'application/json',
        ],
        'listDataStreamings' => [
            'application/json',
        ],
        'overwriteDataStreamingById' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createNewDataStreaming
     *
     * Create a new data streaming
     *
     * @param  \OpenAPI\Client\Model\CreateNewDataStreamingRequest $create_new_data_streaming_request create_new_data_streaming_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewDataStreaming'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreateNewDataStreaming201Response
     */
    public function createNewDataStreaming($create_new_data_streaming_request, string $contentType = self::contentTypes['createNewDataStreaming'][0])
    {
        list($response) = $this->createNewDataStreamingWithHttpInfo($create_new_data_streaming_request, $contentType);
        return $response;
    }

    /**
     * Operation createNewDataStreamingWithHttpInfo
     *
     * Create a new data streaming
     *
     * @param  \OpenAPI\Client\Model\CreateNewDataStreamingRequest $create_new_data_streaming_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewDataStreaming'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreateNewDataStreaming201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNewDataStreamingWithHttpInfo($create_new_data_streaming_request, string $contentType = self::contentTypes['createNewDataStreaming'][0])
    {
        $request = $this->createNewDataStreamingRequest($create_new_data_streaming_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\CreateNewDataStreaming201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CreateNewDataStreaming201Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreateNewDataStreaming201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreateNewDataStreaming201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreateNewDataStreaming201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNewDataStreamingAsync
     *
     * Create a new data streaming
     *
     * @param  \OpenAPI\Client\Model\CreateNewDataStreamingRequest $create_new_data_streaming_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewDataStreaming'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewDataStreamingAsync($create_new_data_streaming_request, string $contentType = self::contentTypes['createNewDataStreaming'][0])
    {
        return $this->createNewDataStreamingAsyncWithHttpInfo($create_new_data_streaming_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNewDataStreamingAsyncWithHttpInfo
     *
     * Create a new data streaming
     *
     * @param  \OpenAPI\Client\Model\CreateNewDataStreamingRequest $create_new_data_streaming_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewDataStreaming'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewDataStreamingAsyncWithHttpInfo($create_new_data_streaming_request, string $contentType = self::contentTypes['createNewDataStreaming'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CreateNewDataStreaming201Response';
        $request = $this->createNewDataStreamingRequest($create_new_data_streaming_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNewDataStreaming'
     *
     * @param  \OpenAPI\Client\Model\CreateNewDataStreamingRequest $create_new_data_streaming_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewDataStreaming'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNewDataStreamingRequest($create_new_data_streaming_request, string $contentType = self::contentTypes['createNewDataStreaming'][0])
    {

        // verify the required parameter 'create_new_data_streaming_request' is set
        if ($create_new_data_streaming_request === null || (is_array($create_new_data_streaming_request) && count($create_new_data_streaming_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_new_data_streaming_request when calling createNewDataStreaming'
            );
        }


        $resourcePath = '/data_streaming/streamings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_new_data_streaming_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_new_data_streaming_request));
            } else {
                $httpBody = $create_new_data_streaming_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDataStreamingById
     *
     * Delete data streaming
     *
     * @param  int $data_streaming_id data_streaming_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDataStreamingById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteDataStreamingById($data_streaming_id, string $contentType = self::contentTypes['deleteDataStreamingById'][0])
    {
        $this->deleteDataStreamingByIdWithHttpInfo($data_streaming_id, $contentType);
    }

    /**
     * Operation deleteDataStreamingByIdWithHttpInfo
     *
     * Delete data streaming
     *
     * @param  int $data_streaming_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDataStreamingById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDataStreamingByIdWithHttpInfo($data_streaming_id, string $contentType = self::contentTypes['deleteDataStreamingById'][0])
    {
        $request = $this->deleteDataStreamingByIdRequest($data_streaming_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDataStreamingByIdAsync
     *
     * Delete data streaming
     *
     * @param  int $data_streaming_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDataStreamingById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDataStreamingByIdAsync($data_streaming_id, string $contentType = self::contentTypes['deleteDataStreamingById'][0])
    {
        return $this->deleteDataStreamingByIdAsyncWithHttpInfo($data_streaming_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDataStreamingByIdAsyncWithHttpInfo
     *
     * Delete data streaming
     *
     * @param  int $data_streaming_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDataStreamingById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDataStreamingByIdAsyncWithHttpInfo($data_streaming_id, string $contentType = self::contentTypes['deleteDataStreamingById'][0])
    {
        $returnType = '';
        $request = $this->deleteDataStreamingByIdRequest($data_streaming_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDataStreamingById'
     *
     * @param  int $data_streaming_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDataStreamingById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteDataStreamingByIdRequest($data_streaming_id, string $contentType = self::contentTypes['deleteDataStreamingById'][0])
    {

        // verify the required parameter 'data_streaming_id' is set
        if ($data_streaming_id === null || (is_array($data_streaming_id) && count($data_streaming_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_streaming_id when calling deleteDataStreamingById'
            );
        }


        $resourcePath = '/data_streaming/streamings/{data_streaming_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($data_streaming_id !== null) {
            $resourcePath = str_replace(
                '{' . 'data_streaming_id' . '}',
                ObjectSerializer::toPathValue($data_streaming_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editDataStreamingById
     *
     * Edit data streaming
     *
     * @param  int $data_streaming_id data_streaming_id (required)
     * @param  \OpenAPI\Client\Model\CreateNewDataStreamingRequest $create_new_data_streaming_request create_new_data_streaming_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editDataStreamingById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreateNewDataStreaming201Response
     */
    public function editDataStreamingById($data_streaming_id, $create_new_data_streaming_request, string $contentType = self::contentTypes['editDataStreamingById'][0])
    {
        list($response) = $this->editDataStreamingByIdWithHttpInfo($data_streaming_id, $create_new_data_streaming_request, $contentType);
        return $response;
    }

    /**
     * Operation editDataStreamingByIdWithHttpInfo
     *
     * Edit data streaming
     *
     * @param  int $data_streaming_id (required)
     * @param  \OpenAPI\Client\Model\CreateNewDataStreamingRequest $create_new_data_streaming_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editDataStreamingById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreateNewDataStreaming201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function editDataStreamingByIdWithHttpInfo($data_streaming_id, $create_new_data_streaming_request, string $contentType = self::contentTypes['editDataStreamingById'][0])
    {
        $request = $this->editDataStreamingByIdRequest($data_streaming_id, $create_new_data_streaming_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CreateNewDataStreaming201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CreateNewDataStreaming201Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreateNewDataStreaming201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreateNewDataStreaming201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreateNewDataStreaming201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation editDataStreamingByIdAsync
     *
     * Edit data streaming
     *
     * @param  int $data_streaming_id (required)
     * @param  \OpenAPI\Client\Model\CreateNewDataStreamingRequest $create_new_data_streaming_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editDataStreamingById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editDataStreamingByIdAsync($data_streaming_id, $create_new_data_streaming_request, string $contentType = self::contentTypes['editDataStreamingById'][0])
    {
        return $this->editDataStreamingByIdAsyncWithHttpInfo($data_streaming_id, $create_new_data_streaming_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editDataStreamingByIdAsyncWithHttpInfo
     *
     * Edit data streaming
     *
     * @param  int $data_streaming_id (required)
     * @param  \OpenAPI\Client\Model\CreateNewDataStreamingRequest $create_new_data_streaming_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editDataStreamingById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editDataStreamingByIdAsyncWithHttpInfo($data_streaming_id, $create_new_data_streaming_request, string $contentType = self::contentTypes['editDataStreamingById'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CreateNewDataStreaming201Response';
        $request = $this->editDataStreamingByIdRequest($data_streaming_id, $create_new_data_streaming_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editDataStreamingById'
     *
     * @param  int $data_streaming_id (required)
     * @param  \OpenAPI\Client\Model\CreateNewDataStreamingRequest $create_new_data_streaming_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editDataStreamingById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function editDataStreamingByIdRequest($data_streaming_id, $create_new_data_streaming_request, string $contentType = self::contentTypes['editDataStreamingById'][0])
    {

        // verify the required parameter 'data_streaming_id' is set
        if ($data_streaming_id === null || (is_array($data_streaming_id) && count($data_streaming_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_streaming_id when calling editDataStreamingById'
            );
        }

        // verify the required parameter 'create_new_data_streaming_request' is set
        if ($create_new_data_streaming_request === null || (is_array($create_new_data_streaming_request) && count($create_new_data_streaming_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_new_data_streaming_request when calling editDataStreamingById'
            );
        }


        $resourcePath = '/data_streaming/streamings/{data_streaming_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($data_streaming_id !== null) {
            $resourcePath = str_replace(
                '{' . 'data_streaming_id' . '}',
                ObjectSerializer::toPathValue($data_streaming_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_new_data_streaming_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_new_data_streaming_request));
            } else {
                $httpBody = $create_new_data_streaming_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDataStreamingById
     *
     * Get expecific data streaming by Data Streaming ID
     *
     * @param  int $data_streaming_id data_streaming_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDataStreamingById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DataStreamingsById
     */
    public function listDataStreamingById($data_streaming_id, string $contentType = self::contentTypes['listDataStreamingById'][0])
    {
        list($response) = $this->listDataStreamingByIdWithHttpInfo($data_streaming_id, $contentType);
        return $response;
    }

    /**
     * Operation listDataStreamingByIdWithHttpInfo
     *
     * Get expecific data streaming by Data Streaming ID
     *
     * @param  int $data_streaming_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDataStreamingById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DataStreamingsById, HTTP status code, HTTP response headers (array of strings)
     */
    public function listDataStreamingByIdWithHttpInfo($data_streaming_id, string $contentType = self::contentTypes['listDataStreamingById'][0])
    {
        $request = $this->listDataStreamingByIdRequest($data_streaming_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DataStreamingsById' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DataStreamingsById' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DataStreamingsById', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DataStreamingsById';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DataStreamingsById',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listDataStreamingByIdAsync
     *
     * Get expecific data streaming by Data Streaming ID
     *
     * @param  int $data_streaming_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDataStreamingById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDataStreamingByIdAsync($data_streaming_id, string $contentType = self::contentTypes['listDataStreamingById'][0])
    {
        return $this->listDataStreamingByIdAsyncWithHttpInfo($data_streaming_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDataStreamingByIdAsyncWithHttpInfo
     *
     * Get expecific data streaming by Data Streaming ID
     *
     * @param  int $data_streaming_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDataStreamingById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDataStreamingByIdAsyncWithHttpInfo($data_streaming_id, string $contentType = self::contentTypes['listDataStreamingById'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DataStreamingsById';
        $request = $this->listDataStreamingByIdRequest($data_streaming_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDataStreamingById'
     *
     * @param  int $data_streaming_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDataStreamingById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listDataStreamingByIdRequest($data_streaming_id, string $contentType = self::contentTypes['listDataStreamingById'][0])
    {

        // verify the required parameter 'data_streaming_id' is set
        if ($data_streaming_id === null || (is_array($data_streaming_id) && count($data_streaming_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_streaming_id when calling listDataStreamingById'
            );
        }


        $resourcePath = '/data_streaming/streamings/{data_streaming_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($data_streaming_id !== null) {
            $resourcePath = str_replace(
                '{' . 'data_streaming_id' . '}',
                ObjectSerializer::toPathValue($data_streaming_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDataStreamings
     *
     * List all exist data streamings
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDataStreamings'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DataStreamingResponseWithResults
     */
    public function listDataStreamings(string $contentType = self::contentTypes['listDataStreamings'][0])
    {
        list($response) = $this->listDataStreamingsWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation listDataStreamingsWithHttpInfo
     *
     * List all exist data streamings
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDataStreamings'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DataStreamingResponseWithResults, HTTP status code, HTTP response headers (array of strings)
     */
    public function listDataStreamingsWithHttpInfo(string $contentType = self::contentTypes['listDataStreamings'][0])
    {
        $request = $this->listDataStreamingsRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DataStreamingResponseWithResults' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DataStreamingResponseWithResults' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DataStreamingResponseWithResults', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DataStreamingResponseWithResults';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DataStreamingResponseWithResults',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listDataStreamingsAsync
     *
     * List all exist data streamings
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDataStreamings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDataStreamingsAsync(string $contentType = self::contentTypes['listDataStreamings'][0])
    {
        return $this->listDataStreamingsAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDataStreamingsAsyncWithHttpInfo
     *
     * List all exist data streamings
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDataStreamings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDataStreamingsAsyncWithHttpInfo(string $contentType = self::contentTypes['listDataStreamings'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DataStreamingResponseWithResults';
        $request = $this->listDataStreamingsRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDataStreamings'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDataStreamings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listDataStreamingsRequest(string $contentType = self::contentTypes['listDataStreamings'][0])
    {


        $resourcePath = '/data_streaming/streamings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation overwriteDataStreamingById
     *
     * Overwrite data streaming
     *
     * @param  int $data_streaming_id data_streaming_id (required)
     * @param  \OpenAPI\Client\Model\CreateNewDataStreamingRequest $create_new_data_streaming_request create_new_data_streaming_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['overwriteDataStreamingById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreateNewDataStreaming201Response
     */
    public function overwriteDataStreamingById($data_streaming_id, $create_new_data_streaming_request, string $contentType = self::contentTypes['overwriteDataStreamingById'][0])
    {
        list($response) = $this->overwriteDataStreamingByIdWithHttpInfo($data_streaming_id, $create_new_data_streaming_request, $contentType);
        return $response;
    }

    /**
     * Operation overwriteDataStreamingByIdWithHttpInfo
     *
     * Overwrite data streaming
     *
     * @param  int $data_streaming_id (required)
     * @param  \OpenAPI\Client\Model\CreateNewDataStreamingRequest $create_new_data_streaming_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['overwriteDataStreamingById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreateNewDataStreaming201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function overwriteDataStreamingByIdWithHttpInfo($data_streaming_id, $create_new_data_streaming_request, string $contentType = self::contentTypes['overwriteDataStreamingById'][0])
    {
        $request = $this->overwriteDataStreamingByIdRequest($data_streaming_id, $create_new_data_streaming_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CreateNewDataStreaming201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CreateNewDataStreaming201Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreateNewDataStreaming201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreateNewDataStreaming201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreateNewDataStreaming201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation overwriteDataStreamingByIdAsync
     *
     * Overwrite data streaming
     *
     * @param  int $data_streaming_id (required)
     * @param  \OpenAPI\Client\Model\CreateNewDataStreamingRequest $create_new_data_streaming_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['overwriteDataStreamingById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function overwriteDataStreamingByIdAsync($data_streaming_id, $create_new_data_streaming_request, string $contentType = self::contentTypes['overwriteDataStreamingById'][0])
    {
        return $this->overwriteDataStreamingByIdAsyncWithHttpInfo($data_streaming_id, $create_new_data_streaming_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation overwriteDataStreamingByIdAsyncWithHttpInfo
     *
     * Overwrite data streaming
     *
     * @param  int $data_streaming_id (required)
     * @param  \OpenAPI\Client\Model\CreateNewDataStreamingRequest $create_new_data_streaming_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['overwriteDataStreamingById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function overwriteDataStreamingByIdAsyncWithHttpInfo($data_streaming_id, $create_new_data_streaming_request, string $contentType = self::contentTypes['overwriteDataStreamingById'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CreateNewDataStreaming201Response';
        $request = $this->overwriteDataStreamingByIdRequest($data_streaming_id, $create_new_data_streaming_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'overwriteDataStreamingById'
     *
     * @param  int $data_streaming_id (required)
     * @param  \OpenAPI\Client\Model\CreateNewDataStreamingRequest $create_new_data_streaming_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['overwriteDataStreamingById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function overwriteDataStreamingByIdRequest($data_streaming_id, $create_new_data_streaming_request, string $contentType = self::contentTypes['overwriteDataStreamingById'][0])
    {

        // verify the required parameter 'data_streaming_id' is set
        if ($data_streaming_id === null || (is_array($data_streaming_id) && count($data_streaming_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_streaming_id when calling overwriteDataStreamingById'
            );
        }

        // verify the required parameter 'create_new_data_streaming_request' is set
        if ($create_new_data_streaming_request === null || (is_array($create_new_data_streaming_request) && count($create_new_data_streaming_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_new_data_streaming_request when calling overwriteDataStreamingById'
            );
        }


        $resourcePath = '/data_streaming/streamings/{data_streaming_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($data_streaming_id !== null) {
            $resourcePath = str_replace(
                '{' . 'data_streaming_id' . '}',
                ObjectSerializer::toPathValue($data_streaming_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_new_data_streaming_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_new_data_streaming_request));
            } else {
                $httpBody = $create_new_data_streaming_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
