<?php
/**
 * PostDataStreamingResponseEndpointInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Data Streaming - OpenAPI
 *
 * The Data Streaming API allows you to manage your existing data streamings and templates. Data Streaming allows you to feed your stream processing, SIEM, and big data platforms with the event logs from your applications on Azion in real time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PostDataStreamingResponseEndpointInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PostDataStreamingResponseEndpointInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PostDataStreamingResponse_endpoint_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'endpoint_type' => 'string',
        'url' => 'string',
        'log_line_separator' => 'string',
        'payload_format' => 'string',
        'max_size' => 'int',
        'headers' => 'array<string,string>[]',
        'kafka_topic' => 'string',
        'bootstrap_servers' => 'string',
        'use_tls' => 'bool',
        'access_key' => 'string',
        'region' => 'string',
        'object_key_prefix' => 'string',
        'bucket_name' => 'string',
        'content_type' => 'string',
        'host_url' => 'string',
        'secret_key' => 'string',
        'dataset_id' => 'string',
        'project_id' => 'string',
        'table_id' => 'string',
        'service_account_key' => '\OpenAPI\Client\Model\EndpointGoogleBigQueryServiceAccountKey',
        'api_key' => 'string',
        'stream_name' => 'string',
        'log_type' => 'string',
        'shared_key' => 'string',
        'time_generated_field' => 'string',
        'workspace_id' => 'string',
        'storage_account' => 'string',
        'container_name' => 'string',
        'blob_sas_token' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'endpoint_type' => null,
        'url' => 'uri',
        'log_line_separator' => null,
        'payload_format' => null,
        'max_size' => null,
        'headers' => null,
        'kafka_topic' => null,
        'bootstrap_servers' => null,
        'use_tls' => null,
        'access_key' => null,
        'region' => null,
        'object_key_prefix' => null,
        'bucket_name' => null,
        'content_type' => null,
        'host_url' => 'uri',
        'secret_key' => null,
        'dataset_id' => null,
        'project_id' => null,
        'table_id' => null,
        'service_account_key' => null,
        'api_key' => null,
        'stream_name' => null,
        'log_type' => null,
        'shared_key' => null,
        'time_generated_field' => null,
        'workspace_id' => null,
        'storage_account' => null,
        'container_name' => null,
        'blob_sas_token' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'endpoint_type' => false,
		'url' => false,
		'log_line_separator' => false,
		'payload_format' => false,
		'max_size' => false,
		'headers' => false,
		'kafka_topic' => false,
		'bootstrap_servers' => false,
		'use_tls' => false,
		'access_key' => false,
		'region' => false,
		'object_key_prefix' => false,
		'bucket_name' => false,
		'content_type' => false,
		'host_url' => false,
		'secret_key' => false,
		'dataset_id' => false,
		'project_id' => false,
		'table_id' => false,
		'service_account_key' => false,
		'api_key' => false,
		'stream_name' => false,
		'log_type' => false,
		'shared_key' => false,
		'time_generated_field' => false,
		'workspace_id' => false,
		'storage_account' => false,
		'container_name' => false,
		'blob_sas_token' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'endpoint_type' => 'endpoint_type',
        'url' => 'url',
        'log_line_separator' => 'log_line_separator',
        'payload_format' => 'payload_format',
        'max_size' => 'max_size',
        'headers' => 'headers',
        'kafka_topic' => 'kafka_topic',
        'bootstrap_servers' => 'bootstrap_servers',
        'use_tls' => 'use_tls',
        'access_key' => 'access_key',
        'region' => 'region',
        'object_key_prefix' => 'object_key_prefix',
        'bucket_name' => 'bucket_name',
        'content_type' => 'content_type',
        'host_url' => 'host_url',
        'secret_key' => 'secret_key',
        'dataset_id' => 'dataset_id',
        'project_id' => 'project_id',
        'table_id' => 'table_id',
        'service_account_key' => 'service_account_key',
        'api_key' => 'api_key',
        'stream_name' => 'stream_name',
        'log_type' => 'log_type',
        'shared_key' => 'shared_key',
        'time_generated_field' => 'time_generated_field',
        'workspace_id' => 'workspace_id',
        'storage_account' => 'storage_account',
        'container_name' => 'container_name',
        'blob_sas_token' => 'blob_sas_token'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'endpoint_type' => 'setEndpointType',
        'url' => 'setUrl',
        'log_line_separator' => 'setLogLineSeparator',
        'payload_format' => 'setPayloadFormat',
        'max_size' => 'setMaxSize',
        'headers' => 'setHeaders',
        'kafka_topic' => 'setKafkaTopic',
        'bootstrap_servers' => 'setBootstrapServers',
        'use_tls' => 'setUseTls',
        'access_key' => 'setAccessKey',
        'region' => 'setRegion',
        'object_key_prefix' => 'setObjectKeyPrefix',
        'bucket_name' => 'setBucketName',
        'content_type' => 'setContentType',
        'host_url' => 'setHostUrl',
        'secret_key' => 'setSecretKey',
        'dataset_id' => 'setDatasetId',
        'project_id' => 'setProjectId',
        'table_id' => 'setTableId',
        'service_account_key' => 'setServiceAccountKey',
        'api_key' => 'setApiKey',
        'stream_name' => 'setStreamName',
        'log_type' => 'setLogType',
        'shared_key' => 'setSharedKey',
        'time_generated_field' => 'setTimeGeneratedField',
        'workspace_id' => 'setWorkspaceId',
        'storage_account' => 'setStorageAccount',
        'container_name' => 'setContainerName',
        'blob_sas_token' => 'setBlobSasToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'endpoint_type' => 'getEndpointType',
        'url' => 'getUrl',
        'log_line_separator' => 'getLogLineSeparator',
        'payload_format' => 'getPayloadFormat',
        'max_size' => 'getMaxSize',
        'headers' => 'getHeaders',
        'kafka_topic' => 'getKafkaTopic',
        'bootstrap_servers' => 'getBootstrapServers',
        'use_tls' => 'getUseTls',
        'access_key' => 'getAccessKey',
        'region' => 'getRegion',
        'object_key_prefix' => 'getObjectKeyPrefix',
        'bucket_name' => 'getBucketName',
        'content_type' => 'getContentType',
        'host_url' => 'getHostUrl',
        'secret_key' => 'getSecretKey',
        'dataset_id' => 'getDatasetId',
        'project_id' => 'getProjectId',
        'table_id' => 'getTableId',
        'service_account_key' => 'getServiceAccountKey',
        'api_key' => 'getApiKey',
        'stream_name' => 'getStreamName',
        'log_type' => 'getLogType',
        'shared_key' => 'getSharedKey',
        'time_generated_field' => 'getTimeGeneratedField',
        'workspace_id' => 'getWorkspaceId',
        'storage_account' => 'getStorageAccount',
        'container_name' => 'getContainerName',
        'blob_sas_token' => 'getBlobSasToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('endpoint_type', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('log_line_separator', $data ?? [], null);
        $this->setIfExists('payload_format', $data ?? [], null);
        $this->setIfExists('max_size', $data ?? [], null);
        $this->setIfExists('headers', $data ?? [], null);
        $this->setIfExists('kafka_topic', $data ?? [], null);
        $this->setIfExists('bootstrap_servers', $data ?? [], null);
        $this->setIfExists('use_tls', $data ?? [], null);
        $this->setIfExists('access_key', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('object_key_prefix', $data ?? [], null);
        $this->setIfExists('bucket_name', $data ?? [], null);
        $this->setIfExists('content_type', $data ?? [], null);
        $this->setIfExists('host_url', $data ?? [], null);
        $this->setIfExists('secret_key', $data ?? [], null);
        $this->setIfExists('dataset_id', $data ?? [], null);
        $this->setIfExists('project_id', $data ?? [], null);
        $this->setIfExists('table_id', $data ?? [], null);
        $this->setIfExists('service_account_key', $data ?? [], null);
        $this->setIfExists('api_key', $data ?? [], null);
        $this->setIfExists('stream_name', $data ?? [], null);
        $this->setIfExists('log_type', $data ?? [], null);
        $this->setIfExists('shared_key', $data ?? [], null);
        $this->setIfExists('time_generated_field', $data ?? [], null);
        $this->setIfExists('workspace_id', $data ?? [], null);
        $this->setIfExists('storage_account', $data ?? [], null);
        $this->setIfExists('container_name', $data ?? [], null);
        $this->setIfExists('blob_sas_token', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['workspace_id']) && !preg_match("/[a-zA-Z0-9]{5}-[a-zA-Z0-9]{5}-[a-zA-Z0-9]{6}/", $this->container['workspace_id'])) {
            $invalidProperties[] = "invalid value for 'workspace_id', must be conform to the pattern /[a-zA-Z0-9]{5}-[a-zA-Z0-9]{5}-[a-zA-Z0-9]{6}/.";
        }

        if (!is_null($this->container['blob_sas_token']) && !preg_match("/[a-zA-Z0-9]{15}/", $this->container['blob_sas_token'])) {
            $invalidProperties[] = "invalid value for 'blob_sas_token', must be conform to the pattern /[a-zA-Z0-9]{15}/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets endpoint_type
     *
     * @return string|null
     */
    public function getEndpointType()
    {
        return $this->container['endpoint_type'];
    }

    /**
     * Sets endpoint_type
     *
     * @param string|null $endpoint_type endpoint_type
     *
     * @return self
     */
    public function setEndpointType($endpoint_type)
    {
        if (is_null($endpoint_type)) {
            throw new \InvalidArgumentException('non-nullable endpoint_type cannot be null');
        }
        $this->container['endpoint_type'] = $endpoint_type;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets log_line_separator
     *
     * @return string|null
     */
    public function getLogLineSeparator()
    {
        return $this->container['log_line_separator'];
    }

    /**
     * Sets log_line_separator
     *
     * @param string|null $log_line_separator log_line_separator
     *
     * @return self
     */
    public function setLogLineSeparator($log_line_separator)
    {
        if (is_null($log_line_separator)) {
            throw new \InvalidArgumentException('non-nullable log_line_separator cannot be null');
        }
        $this->container['log_line_separator'] = $log_line_separator;

        return $this;
    }

    /**
     * Gets payload_format
     *
     * @return string|null
     */
    public function getPayloadFormat()
    {
        return $this->container['payload_format'];
    }

    /**
     * Sets payload_format
     *
     * @param string|null $payload_format payload_format
     *
     * @return self
     */
    public function setPayloadFormat($payload_format)
    {
        if (is_null($payload_format)) {
            throw new \InvalidArgumentException('non-nullable payload_format cannot be null');
        }
        $this->container['payload_format'] = $payload_format;

        return $this;
    }

    /**
     * Gets max_size
     *
     * @return int|null
     */
    public function getMaxSize()
    {
        return $this->container['max_size'];
    }

    /**
     * Sets max_size
     *
     * @param int|null $max_size max_size
     *
     * @return self
     */
    public function setMaxSize($max_size)
    {
        if (is_null($max_size)) {
            throw new \InvalidArgumentException('non-nullable max_size cannot be null');
        }
        $this->container['max_size'] = $max_size;

        return $this;
    }

    /**
     * Gets headers
     *
     * @return array<string,string>[]|null
     */
    public function getHeaders()
    {
        return $this->container['headers'];
    }

    /**
     * Sets headers
     *
     * @param array<string,string>[]|null $headers headers
     *
     * @return self
     */
    public function setHeaders($headers)
    {
        if (is_null($headers)) {
            throw new \InvalidArgumentException('non-nullable headers cannot be null');
        }


        $this->container['headers'] = $headers;

        return $this;
    }

    /**
     * Gets kafka_topic
     *
     * @return string|null
     */
    public function getKafkaTopic()
    {
        return $this->container['kafka_topic'];
    }

    /**
     * Sets kafka_topic
     *
     * @param string|null $kafka_topic kafka_topic
     *
     * @return self
     */
    public function setKafkaTopic($kafka_topic)
    {
        if (is_null($kafka_topic)) {
            throw new \InvalidArgumentException('non-nullable kafka_topic cannot be null');
        }
        $this->container['kafka_topic'] = $kafka_topic;

        return $this;
    }

    /**
     * Gets bootstrap_servers
     *
     * @return string|null
     */
    public function getBootstrapServers()
    {
        return $this->container['bootstrap_servers'];
    }

    /**
     * Sets bootstrap_servers
     *
     * @param string|null $bootstrap_servers bootstrap_servers
     *
     * @return self
     */
    public function setBootstrapServers($bootstrap_servers)
    {
        if (is_null($bootstrap_servers)) {
            throw new \InvalidArgumentException('non-nullable bootstrap_servers cannot be null');
        }
        $this->container['bootstrap_servers'] = $bootstrap_servers;

        return $this;
    }

    /**
     * Gets use_tls
     *
     * @return bool|null
     */
    public function getUseTls()
    {
        return $this->container['use_tls'];
    }

    /**
     * Sets use_tls
     *
     * @param bool|null $use_tls use_tls
     *
     * @return self
     */
    public function setUseTls($use_tls)
    {
        if (is_null($use_tls)) {
            throw new \InvalidArgumentException('non-nullable use_tls cannot be null');
        }
        $this->container['use_tls'] = $use_tls;

        return $this;
    }

    /**
     * Gets access_key
     *
     * @return string|null
     */
    public function getAccessKey()
    {
        return $this->container['access_key'];
    }

    /**
     * Sets access_key
     *
     * @param string|null $access_key access_key
     *
     * @return self
     */
    public function setAccessKey($access_key)
    {
        if (is_null($access_key)) {
            throw new \InvalidArgumentException('non-nullable access_key cannot be null');
        }
        $this->container['access_key'] = $access_key;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region region
     *
     * @return self
     */
    public function setRegion($region)
    {
        if (is_null($region)) {
            throw new \InvalidArgumentException('non-nullable region cannot be null');
        }
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets object_key_prefix
     *
     * @return string|null
     */
    public function getObjectKeyPrefix()
    {
        return $this->container['object_key_prefix'];
    }

    /**
     * Sets object_key_prefix
     *
     * @param string|null $object_key_prefix object_key_prefix
     *
     * @return self
     */
    public function setObjectKeyPrefix($object_key_prefix)
    {
        if (is_null($object_key_prefix)) {
            throw new \InvalidArgumentException('non-nullable object_key_prefix cannot be null');
        }
        $this->container['object_key_prefix'] = $object_key_prefix;

        return $this;
    }

    /**
     * Gets bucket_name
     *
     * @return string|null
     */
    public function getBucketName()
    {
        return $this->container['bucket_name'];
    }

    /**
     * Sets bucket_name
     *
     * @param string|null $bucket_name bucket_name
     *
     * @return self
     */
    public function setBucketName($bucket_name)
    {
        if (is_null($bucket_name)) {
            throw new \InvalidArgumentException('non-nullable bucket_name cannot be null');
        }
        $this->container['bucket_name'] = $bucket_name;

        return $this;
    }

    /**
     * Gets content_type
     *
     * @return string|null
     */
    public function getContentType()
    {
        return $this->container['content_type'];
    }

    /**
     * Sets content_type
     *
     * @param string|null $content_type content_type
     *
     * @return self
     */
    public function setContentType($content_type)
    {
        if (is_null($content_type)) {
            throw new \InvalidArgumentException('non-nullable content_type cannot be null');
        }
        $this->container['content_type'] = $content_type;

        return $this;
    }

    /**
     * Gets host_url
     *
     * @return string|null
     */
    public function getHostUrl()
    {
        return $this->container['host_url'];
    }

    /**
     * Sets host_url
     *
     * @param string|null $host_url host_url
     *
     * @return self
     */
    public function setHostUrl($host_url)
    {
        if (is_null($host_url)) {
            throw new \InvalidArgumentException('non-nullable host_url cannot be null');
        }
        $this->container['host_url'] = $host_url;

        return $this;
    }

    /**
     * Gets secret_key
     *
     * @return string|null
     */
    public function getSecretKey()
    {
        return $this->container['secret_key'];
    }

    /**
     * Sets secret_key
     *
     * @param string|null $secret_key secret_key
     *
     * @return self
     */
    public function setSecretKey($secret_key)
    {
        if (is_null($secret_key)) {
            throw new \InvalidArgumentException('non-nullable secret_key cannot be null');
        }
        $this->container['secret_key'] = $secret_key;

        return $this;
    }

    /**
     * Gets dataset_id
     *
     * @return string|null
     */
    public function getDatasetId()
    {
        return $this->container['dataset_id'];
    }

    /**
     * Sets dataset_id
     *
     * @param string|null $dataset_id dataset_id
     *
     * @return self
     */
    public function setDatasetId($dataset_id)
    {
        if (is_null($dataset_id)) {
            throw new \InvalidArgumentException('non-nullable dataset_id cannot be null');
        }
        $this->container['dataset_id'] = $dataset_id;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string|null
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string|null $project_id project_id
     *
     * @return self
     */
    public function setProjectId($project_id)
    {
        if (is_null($project_id)) {
            throw new \InvalidArgumentException('non-nullable project_id cannot be null');
        }
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets table_id
     *
     * @return string|null
     */
    public function getTableId()
    {
        return $this->container['table_id'];
    }

    /**
     * Sets table_id
     *
     * @param string|null $table_id table_id
     *
     * @return self
     */
    public function setTableId($table_id)
    {
        if (is_null($table_id)) {
            throw new \InvalidArgumentException('non-nullable table_id cannot be null');
        }
        $this->container['table_id'] = $table_id;

        return $this;
    }

    /**
     * Gets service_account_key
     *
     * @return \OpenAPI\Client\Model\EndpointGoogleBigQueryServiceAccountKey|null
     */
    public function getServiceAccountKey()
    {
        return $this->container['service_account_key'];
    }

    /**
     * Sets service_account_key
     *
     * @param \OpenAPI\Client\Model\EndpointGoogleBigQueryServiceAccountKey|null $service_account_key service_account_key
     *
     * @return self
     */
    public function setServiceAccountKey($service_account_key)
    {
        if (is_null($service_account_key)) {
            throw new \InvalidArgumentException('non-nullable service_account_key cannot be null');
        }
        $this->container['service_account_key'] = $service_account_key;

        return $this;
    }

    /**
     * Gets api_key
     *
     * @return string|null
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param string|null $api_key api_key
     *
     * @return self
     */
    public function setApiKey($api_key)
    {
        if (is_null($api_key)) {
            throw new \InvalidArgumentException('non-nullable api_key cannot be null');
        }
        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets stream_name
     *
     * @return string|null
     */
    public function getStreamName()
    {
        return $this->container['stream_name'];
    }

    /**
     * Sets stream_name
     *
     * @param string|null $stream_name stream_name
     *
     * @return self
     */
    public function setStreamName($stream_name)
    {
        if (is_null($stream_name)) {
            throw new \InvalidArgumentException('non-nullable stream_name cannot be null');
        }
        $this->container['stream_name'] = $stream_name;

        return $this;
    }

    /**
     * Gets log_type
     *
     * @return string|null
     */
    public function getLogType()
    {
        return $this->container['log_type'];
    }

    /**
     * Sets log_type
     *
     * @param string|null $log_type log_type
     *
     * @return self
     */
    public function setLogType($log_type)
    {
        if (is_null($log_type)) {
            throw new \InvalidArgumentException('non-nullable log_type cannot be null');
        }
        $this->container['log_type'] = $log_type;

        return $this;
    }

    /**
     * Gets shared_key
     *
     * @return string|null
     */
    public function getSharedKey()
    {
        return $this->container['shared_key'];
    }

    /**
     * Sets shared_key
     *
     * @param string|null $shared_key shared_key
     *
     * @return self
     */
    public function setSharedKey($shared_key)
    {
        if (is_null($shared_key)) {
            throw new \InvalidArgumentException('non-nullable shared_key cannot be null');
        }
        $this->container['shared_key'] = $shared_key;

        return $this;
    }

    /**
     * Gets time_generated_field
     *
     * @return string|null
     */
    public function getTimeGeneratedField()
    {
        return $this->container['time_generated_field'];
    }

    /**
     * Sets time_generated_field
     *
     * @param string|null $time_generated_field time_generated_field
     *
     * @return self
     */
    public function setTimeGeneratedField($time_generated_field)
    {
        if (is_null($time_generated_field)) {
            throw new \InvalidArgumentException('non-nullable time_generated_field cannot be null');
        }
        $this->container['time_generated_field'] = $time_generated_field;

        return $this;
    }

    /**
     * Gets workspace_id
     *
     * @return string|null
     */
    public function getWorkspaceId()
    {
        return $this->container['workspace_id'];
    }

    /**
     * Sets workspace_id
     *
     * @param string|null $workspace_id workspace_id
     *
     * @return self
     */
    public function setWorkspaceId($workspace_id)
    {
        if (is_null($workspace_id)) {
            throw new \InvalidArgumentException('non-nullable workspace_id cannot be null');
        }

        if ((!preg_match("/[a-zA-Z0-9]{5}-[a-zA-Z0-9]{5}-[a-zA-Z0-9]{6}/", $workspace_id))) {
            throw new \InvalidArgumentException("invalid value for \$workspace_id when calling PostDataStreamingResponseEndpointInner., must conform to the pattern /[a-zA-Z0-9]{5}-[a-zA-Z0-9]{5}-[a-zA-Z0-9]{6}/.");
        }

        $this->container['workspace_id'] = $workspace_id;

        return $this;
    }

    /**
     * Gets storage_account
     *
     * @return string|null
     */
    public function getStorageAccount()
    {
        return $this->container['storage_account'];
    }

    /**
     * Sets storage_account
     *
     * @param string|null $storage_account storage_account
     *
     * @return self
     */
    public function setStorageAccount($storage_account)
    {
        if (is_null($storage_account)) {
            throw new \InvalidArgumentException('non-nullable storage_account cannot be null');
        }
        $this->container['storage_account'] = $storage_account;

        return $this;
    }

    /**
     * Gets container_name
     *
     * @return string|null
     */
    public function getContainerName()
    {
        return $this->container['container_name'];
    }

    /**
     * Sets container_name
     *
     * @param string|null $container_name container_name
     *
     * @return self
     */
    public function setContainerName($container_name)
    {
        if (is_null($container_name)) {
            throw new \InvalidArgumentException('non-nullable container_name cannot be null');
        }
        $this->container['container_name'] = $container_name;

        return $this;
    }

    /**
     * Gets blob_sas_token
     *
     * @return string|null
     */
    public function getBlobSasToken()
    {
        return $this->container['blob_sas_token'];
    }

    /**
     * Sets blob_sas_token
     *
     * @param string|null $blob_sas_token blob_sas_token
     *
     * @return self
     */
    public function setBlobSasToken($blob_sas_token)
    {
        if (is_null($blob_sas_token)) {
            throw new \InvalidArgumentException('non-nullable blob_sas_token cannot be null');
        }

        if ((!preg_match("/[a-zA-Z0-9]{15}/", $blob_sas_token))) {
            throw new \InvalidArgumentException("invalid value for \$blob_sas_token when calling PostDataStreamingResponseEndpointInner., must conform to the pattern /[a-zA-Z0-9]{15}/.");
        }

        $this->container['blob_sas_token'] = $blob_sas_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


