<?php
/**
 * DefaultApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Edge Node API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'authorizeEdgeNode' => [
            'application/json; version=3',
        ],
        'createEdgeNodeSvcs' => [
            'application/json; version=3',
        ],
        'delEdgeNode' => [
            'application/json',
        ],
        'delEdgeNodeSvc' => [
            'application/json',
        ],
        'getEdgeNode' => [
            'application/json',
        ],
        'getEdgeNodeGroups' => [
            'application/json',
        ],
        'getEdgeNodeSvcDetail' => [
            'application/json',
        ],
        'getEdgeNodeSvcs' => [
            'application/json',
        ],
        'getEdgeNodes' => [
            'application/json',
        ],
        'updateEdgeNode' => [
            'application/json',
        ],
        'updateEdgeNodeSvcDetail' => [
            'application/json; version=3',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation authorizeEdgeNode
     *
     * Authorize edge-node
     *
     * @param  \OpenAPI\Client\Model\AuthorizeEdgeNodesRequest $authorize_edge_nodes_request authorize_edge_nodes_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authorizeEdgeNode'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuthorizeEdgeNodesResponse
     */
    public function authorizeEdgeNode($authorize_edge_nodes_request, string $contentType = self::contentTypes['authorizeEdgeNode'][0])
    {
        list($response) = $this->authorizeEdgeNodeWithHttpInfo($authorize_edge_nodes_request, $contentType);
        return $response;
    }

    /**
     * Operation authorizeEdgeNodeWithHttpInfo
     *
     * Authorize edge-node
     *
     * @param  \OpenAPI\Client\Model\AuthorizeEdgeNodesRequest $authorize_edge_nodes_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authorizeEdgeNode'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuthorizeEdgeNodesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function authorizeEdgeNodeWithHttpInfo($authorize_edge_nodes_request, string $contentType = self::contentTypes['authorizeEdgeNode'][0])
    {
        $request = $this->authorizeEdgeNodeRequest($authorize_edge_nodes_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuthorizeEdgeNodesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuthorizeEdgeNodesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuthorizeEdgeNodesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuthorizeEdgeNodesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuthorizeEdgeNodesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authorizeEdgeNodeAsync
     *
     * Authorize edge-node
     *
     * @param  \OpenAPI\Client\Model\AuthorizeEdgeNodesRequest $authorize_edge_nodes_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authorizeEdgeNode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authorizeEdgeNodeAsync($authorize_edge_nodes_request, string $contentType = self::contentTypes['authorizeEdgeNode'][0])
    {
        return $this->authorizeEdgeNodeAsyncWithHttpInfo($authorize_edge_nodes_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authorizeEdgeNodeAsyncWithHttpInfo
     *
     * Authorize edge-node
     *
     * @param  \OpenAPI\Client\Model\AuthorizeEdgeNodesRequest $authorize_edge_nodes_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authorizeEdgeNode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authorizeEdgeNodeAsyncWithHttpInfo($authorize_edge_nodes_request, string $contentType = self::contentTypes['authorizeEdgeNode'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuthorizeEdgeNodesResponse';
        $request = $this->authorizeEdgeNodeRequest($authorize_edge_nodes_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authorizeEdgeNode'
     *
     * @param  \OpenAPI\Client\Model\AuthorizeEdgeNodesRequest $authorize_edge_nodes_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authorizeEdgeNode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function authorizeEdgeNodeRequest($authorize_edge_nodes_request, string $contentType = self::contentTypes['authorizeEdgeNode'][0])
    {

        // verify the required parameter 'authorize_edge_nodes_request' is set
        if ($authorize_edge_nodes_request === null || (is_array($authorize_edge_nodes_request) && count($authorize_edge_nodes_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorize_edge_nodes_request when calling authorizeEdgeNode'
            );
        }


        $resourcePath = '/edge_nodes/authorize';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json; version=3', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($authorize_edge_nodes_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($authorize_edge_nodes_request));
            } else {
                $httpBody = $authorize_edge_nodes_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createEdgeNodeSvcs
     *
     * Create an edge-node Service association
     *
     * @param  int $edgenode_id edgenode_id (required)
     * @param  \OpenAPI\Client\Model\ServiceBindRequest $service_bind_request service_bind_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEdgeNodeSvcs'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ServiceBindDetailResponse
     */
    public function createEdgeNodeSvcs($edgenode_id, $service_bind_request, string $contentType = self::contentTypes['createEdgeNodeSvcs'][0])
    {
        list($response) = $this->createEdgeNodeSvcsWithHttpInfo($edgenode_id, $service_bind_request, $contentType);
        return $response;
    }

    /**
     * Operation createEdgeNodeSvcsWithHttpInfo
     *
     * Create an edge-node Service association
     *
     * @param  int $edgenode_id (required)
     * @param  \OpenAPI\Client\Model\ServiceBindRequest $service_bind_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEdgeNodeSvcs'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ServiceBindDetailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createEdgeNodeSvcsWithHttpInfo($edgenode_id, $service_bind_request, string $contentType = self::contentTypes['createEdgeNodeSvcs'][0])
    {
        $request = $this->createEdgeNodeSvcsRequest($edgenode_id, $service_bind_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\ServiceBindDetailResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ServiceBindDetailResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ServiceBindDetailResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ServiceBindDetailResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ServiceBindDetailResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createEdgeNodeSvcsAsync
     *
     * Create an edge-node Service association
     *
     * @param  int $edgenode_id (required)
     * @param  \OpenAPI\Client\Model\ServiceBindRequest $service_bind_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEdgeNodeSvcs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEdgeNodeSvcsAsync($edgenode_id, $service_bind_request, string $contentType = self::contentTypes['createEdgeNodeSvcs'][0])
    {
        return $this->createEdgeNodeSvcsAsyncWithHttpInfo($edgenode_id, $service_bind_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createEdgeNodeSvcsAsyncWithHttpInfo
     *
     * Create an edge-node Service association
     *
     * @param  int $edgenode_id (required)
     * @param  \OpenAPI\Client\Model\ServiceBindRequest $service_bind_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEdgeNodeSvcs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEdgeNodeSvcsAsyncWithHttpInfo($edgenode_id, $service_bind_request, string $contentType = self::contentTypes['createEdgeNodeSvcs'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ServiceBindDetailResponse';
        $request = $this->createEdgeNodeSvcsRequest($edgenode_id, $service_bind_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createEdgeNodeSvcs'
     *
     * @param  int $edgenode_id (required)
     * @param  \OpenAPI\Client\Model\ServiceBindRequest $service_bind_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEdgeNodeSvcs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createEdgeNodeSvcsRequest($edgenode_id, $service_bind_request, string $contentType = self::contentTypes['createEdgeNodeSvcs'][0])
    {

        // verify the required parameter 'edgenode_id' is set
        if ($edgenode_id === null || (is_array($edgenode_id) && count($edgenode_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $edgenode_id when calling createEdgeNodeSvcs'
            );
        }

        // verify the required parameter 'service_bind_request' is set
        if ($service_bind_request === null || (is_array($service_bind_request) && count($service_bind_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_bind_request when calling createEdgeNodeSvcs'
            );
        }


        $resourcePath = '/edge_nodes/{edgenodeId}/services';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($edgenode_id !== null) {
            $resourcePath = str_replace(
                '{' . 'edgenodeId' . '}',
                ObjectSerializer::toPathValue($edgenode_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json; version=3', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($service_bind_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($service_bind_request));
            } else {
                $httpBody = $service_bind_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation delEdgeNode
     *
     * Delete edge-node by ID
     *
     * @param  int $edgenode_id edgenode_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['delEdgeNode'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function delEdgeNode($edgenode_id, string $contentType = self::contentTypes['delEdgeNode'][0])
    {
        $this->delEdgeNodeWithHttpInfo($edgenode_id, $contentType);
    }

    /**
     * Operation delEdgeNodeWithHttpInfo
     *
     * Delete edge-node by ID
     *
     * @param  int $edgenode_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['delEdgeNode'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function delEdgeNodeWithHttpInfo($edgenode_id, string $contentType = self::contentTypes['delEdgeNode'][0])
    {
        $request = $this->delEdgeNodeRequest($edgenode_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation delEdgeNodeAsync
     *
     * Delete edge-node by ID
     *
     * @param  int $edgenode_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['delEdgeNode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function delEdgeNodeAsync($edgenode_id, string $contentType = self::contentTypes['delEdgeNode'][0])
    {
        return $this->delEdgeNodeAsyncWithHttpInfo($edgenode_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation delEdgeNodeAsyncWithHttpInfo
     *
     * Delete edge-node by ID
     *
     * @param  int $edgenode_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['delEdgeNode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function delEdgeNodeAsyncWithHttpInfo($edgenode_id, string $contentType = self::contentTypes['delEdgeNode'][0])
    {
        $returnType = '';
        $request = $this->delEdgeNodeRequest($edgenode_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'delEdgeNode'
     *
     * @param  int $edgenode_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['delEdgeNode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function delEdgeNodeRequest($edgenode_id, string $contentType = self::contentTypes['delEdgeNode'][0])
    {

        // verify the required parameter 'edgenode_id' is set
        if ($edgenode_id === null || (is_array($edgenode_id) && count($edgenode_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $edgenode_id when calling delEdgeNode'
            );
        }


        $resourcePath = '/edge_nodes/{edgenodeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($edgenode_id !== null) {
            $resourcePath = str_replace(
                '{' . 'edgenodeId' . '}',
                ObjectSerializer::toPathValue($edgenode_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation delEdgeNodeSvc
     *
     * Delete an edge-node Service association
     *
     * @param  int $edgenode_id edgenode_id (required)
     * @param  int $bind_id bind_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['delEdgeNodeSvc'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function delEdgeNodeSvc($edgenode_id, $bind_id, string $contentType = self::contentTypes['delEdgeNodeSvc'][0])
    {
        $this->delEdgeNodeSvcWithHttpInfo($edgenode_id, $bind_id, $contentType);
    }

    /**
     * Operation delEdgeNodeSvcWithHttpInfo
     *
     * Delete an edge-node Service association
     *
     * @param  int $edgenode_id (required)
     * @param  int $bind_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['delEdgeNodeSvc'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function delEdgeNodeSvcWithHttpInfo($edgenode_id, $bind_id, string $contentType = self::contentTypes['delEdgeNodeSvc'][0])
    {
        $request = $this->delEdgeNodeSvcRequest($edgenode_id, $bind_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation delEdgeNodeSvcAsync
     *
     * Delete an edge-node Service association
     *
     * @param  int $edgenode_id (required)
     * @param  int $bind_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['delEdgeNodeSvc'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function delEdgeNodeSvcAsync($edgenode_id, $bind_id, string $contentType = self::contentTypes['delEdgeNodeSvc'][0])
    {
        return $this->delEdgeNodeSvcAsyncWithHttpInfo($edgenode_id, $bind_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation delEdgeNodeSvcAsyncWithHttpInfo
     *
     * Delete an edge-node Service association
     *
     * @param  int $edgenode_id (required)
     * @param  int $bind_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['delEdgeNodeSvc'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function delEdgeNodeSvcAsyncWithHttpInfo($edgenode_id, $bind_id, string $contentType = self::contentTypes['delEdgeNodeSvc'][0])
    {
        $returnType = '';
        $request = $this->delEdgeNodeSvcRequest($edgenode_id, $bind_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'delEdgeNodeSvc'
     *
     * @param  int $edgenode_id (required)
     * @param  int $bind_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['delEdgeNodeSvc'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function delEdgeNodeSvcRequest($edgenode_id, $bind_id, string $contentType = self::contentTypes['delEdgeNodeSvc'][0])
    {

        // verify the required parameter 'edgenode_id' is set
        if ($edgenode_id === null || (is_array($edgenode_id) && count($edgenode_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $edgenode_id when calling delEdgeNodeSvc'
            );
        }

        // verify the required parameter 'bind_id' is set
        if ($bind_id === null || (is_array($bind_id) && count($bind_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bind_id when calling delEdgeNodeSvc'
            );
        }


        $resourcePath = '/edge_nodes/{edgenodeId}/services/{bindId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($edgenode_id !== null) {
            $resourcePath = str_replace(
                '{' . 'edgenodeId' . '}',
                ObjectSerializer::toPathValue($edgenode_id),
                $resourcePath
            );
        }
        // path params
        if ($bind_id !== null) {
            $resourcePath = str_replace(
                '{' . 'bindId' . '}',
                ObjectSerializer::toPathValue($bind_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEdgeNode
     *
     * Return edge-node by ID
     *
     * @param  int $edgenode_id edgenode_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEdgeNode'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EdgeNodeDetailResponse
     */
    public function getEdgeNode($edgenode_id, string $contentType = self::contentTypes['getEdgeNode'][0])
    {
        list($response) = $this->getEdgeNodeWithHttpInfo($edgenode_id, $contentType);
        return $response;
    }

    /**
     * Operation getEdgeNodeWithHttpInfo
     *
     * Return edge-node by ID
     *
     * @param  int $edgenode_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEdgeNode'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EdgeNodeDetailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEdgeNodeWithHttpInfo($edgenode_id, string $contentType = self::contentTypes['getEdgeNode'][0])
    {
        $request = $this->getEdgeNodeRequest($edgenode_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EdgeNodeDetailResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EdgeNodeDetailResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EdgeNodeDetailResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EdgeNodeDetailResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EdgeNodeDetailResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEdgeNodeAsync
     *
     * Return edge-node by ID
     *
     * @param  int $edgenode_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEdgeNode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEdgeNodeAsync($edgenode_id, string $contentType = self::contentTypes['getEdgeNode'][0])
    {
        return $this->getEdgeNodeAsyncWithHttpInfo($edgenode_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEdgeNodeAsyncWithHttpInfo
     *
     * Return edge-node by ID
     *
     * @param  int $edgenode_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEdgeNode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEdgeNodeAsyncWithHttpInfo($edgenode_id, string $contentType = self::contentTypes['getEdgeNode'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EdgeNodeDetailResponse';
        $request = $this->getEdgeNodeRequest($edgenode_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEdgeNode'
     *
     * @param  int $edgenode_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEdgeNode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEdgeNodeRequest($edgenode_id, string $contentType = self::contentTypes['getEdgeNode'][0])
    {

        // verify the required parameter 'edgenode_id' is set
        if ($edgenode_id === null || (is_array($edgenode_id) && count($edgenode_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $edgenode_id when calling getEdgeNode'
            );
        }


        $resourcePath = '/edge_nodes/{edgenodeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($edgenode_id !== null) {
            $resourcePath = str_replace(
                '{' . 'edgenodeId' . '}',
                ObjectSerializer::toPathValue($edgenode_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json; version=3', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEdgeNodeGroups
     *
     * Return edge-node groups
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEdgeNodeGroups'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\NodeGroupResponse[]
     */
    public function getEdgeNodeGroups(string $contentType = self::contentTypes['getEdgeNodeGroups'][0])
    {
        list($response) = $this->getEdgeNodeGroupsWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getEdgeNodeGroupsWithHttpInfo
     *
     * Return edge-node groups
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEdgeNodeGroups'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\NodeGroupResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEdgeNodeGroupsWithHttpInfo(string $contentType = self::contentTypes['getEdgeNodeGroups'][0])
    {
        $request = $this->getEdgeNodeGroupsRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\NodeGroupResponse[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NodeGroupResponse[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NodeGroupResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\NodeGroupResponse[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NodeGroupResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEdgeNodeGroupsAsync
     *
     * Return edge-node groups
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEdgeNodeGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEdgeNodeGroupsAsync(string $contentType = self::contentTypes['getEdgeNodeGroups'][0])
    {
        return $this->getEdgeNodeGroupsAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEdgeNodeGroupsAsyncWithHttpInfo
     *
     * Return edge-node groups
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEdgeNodeGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEdgeNodeGroupsAsyncWithHttpInfo(string $contentType = self::contentTypes['getEdgeNodeGroups'][0])
    {
        $returnType = '\OpenAPI\Client\Model\NodeGroupResponse[]';
        $request = $this->getEdgeNodeGroupsRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEdgeNodeGroups'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEdgeNodeGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEdgeNodeGroupsRequest(string $contentType = self::contentTypes['getEdgeNodeGroups'][0])
    {


        $resourcePath = '/edge_nodes/groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json; version=3', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEdgeNodeSvcDetail
     *
     * Return edge-node Service association by ID
     *
     * @param  int $edgenode_id edgenode_id (required)
     * @param  int $bind_id bind_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEdgeNodeSvcDetail'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ServiceBindDetailResponse
     */
    public function getEdgeNodeSvcDetail($edgenode_id, $bind_id, string $contentType = self::contentTypes['getEdgeNodeSvcDetail'][0])
    {
        list($response) = $this->getEdgeNodeSvcDetailWithHttpInfo($edgenode_id, $bind_id, $contentType);
        return $response;
    }

    /**
     * Operation getEdgeNodeSvcDetailWithHttpInfo
     *
     * Return edge-node Service association by ID
     *
     * @param  int $edgenode_id (required)
     * @param  int $bind_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEdgeNodeSvcDetail'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ServiceBindDetailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEdgeNodeSvcDetailWithHttpInfo($edgenode_id, $bind_id, string $contentType = self::contentTypes['getEdgeNodeSvcDetail'][0])
    {
        $request = $this->getEdgeNodeSvcDetailRequest($edgenode_id, $bind_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ServiceBindDetailResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ServiceBindDetailResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ServiceBindDetailResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ServiceBindDetailResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ServiceBindDetailResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEdgeNodeSvcDetailAsync
     *
     * Return edge-node Service association by ID
     *
     * @param  int $edgenode_id (required)
     * @param  int $bind_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEdgeNodeSvcDetail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEdgeNodeSvcDetailAsync($edgenode_id, $bind_id, string $contentType = self::contentTypes['getEdgeNodeSvcDetail'][0])
    {
        return $this->getEdgeNodeSvcDetailAsyncWithHttpInfo($edgenode_id, $bind_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEdgeNodeSvcDetailAsyncWithHttpInfo
     *
     * Return edge-node Service association by ID
     *
     * @param  int $edgenode_id (required)
     * @param  int $bind_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEdgeNodeSvcDetail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEdgeNodeSvcDetailAsyncWithHttpInfo($edgenode_id, $bind_id, string $contentType = self::contentTypes['getEdgeNodeSvcDetail'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ServiceBindDetailResponse';
        $request = $this->getEdgeNodeSvcDetailRequest($edgenode_id, $bind_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEdgeNodeSvcDetail'
     *
     * @param  int $edgenode_id (required)
     * @param  int $bind_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEdgeNodeSvcDetail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEdgeNodeSvcDetailRequest($edgenode_id, $bind_id, string $contentType = self::contentTypes['getEdgeNodeSvcDetail'][0])
    {

        // verify the required parameter 'edgenode_id' is set
        if ($edgenode_id === null || (is_array($edgenode_id) && count($edgenode_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $edgenode_id when calling getEdgeNodeSvcDetail'
            );
        }

        // verify the required parameter 'bind_id' is set
        if ($bind_id === null || (is_array($bind_id) && count($bind_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bind_id when calling getEdgeNodeSvcDetail'
            );
        }


        $resourcePath = '/edge_nodes/{edgenodeId}/services/{bindId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($edgenode_id !== null) {
            $resourcePath = str_replace(
                '{' . 'edgenodeId' . '}',
                ObjectSerializer::toPathValue($edgenode_id),
                $resourcePath
            );
        }
        // path params
        if ($bind_id !== null) {
            $resourcePath = str_replace(
                '{' . 'bindId' . '}',
                ObjectSerializer::toPathValue($bind_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json; version=3', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEdgeNodeSvcs
     *
     * Return edge-node Services association
     *
     * @param  int $edgenode_id edgenode_id (required)
     * @param  bool $is_bound is_bound (optional)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional)
     * @param  string $sort sort (optional)
     * @param  int $page page (optional)
     * @param  int $page_size page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEdgeNodeSvcs'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ServiceResponseWithTotal
     */
    public function getEdgeNodeSvcs($edgenode_id, $is_bound = null, $filter = null, $order_by = null, $sort = null, $page = null, $page_size = null, string $contentType = self::contentTypes['getEdgeNodeSvcs'][0])
    {
        list($response) = $this->getEdgeNodeSvcsWithHttpInfo($edgenode_id, $is_bound, $filter, $order_by, $sort, $page, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation getEdgeNodeSvcsWithHttpInfo
     *
     * Return edge-node Services association
     *
     * @param  int $edgenode_id (required)
     * @param  bool $is_bound (optional)
     * @param  string $filter (optional)
     * @param  string $order_by (optional)
     * @param  string $sort (optional)
     * @param  int $page (optional)
     * @param  int $page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEdgeNodeSvcs'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ServiceResponseWithTotal, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEdgeNodeSvcsWithHttpInfo($edgenode_id, $is_bound = null, $filter = null, $order_by = null, $sort = null, $page = null, $page_size = null, string $contentType = self::contentTypes['getEdgeNodeSvcs'][0])
    {
        $request = $this->getEdgeNodeSvcsRequest($edgenode_id, $is_bound, $filter, $order_by, $sort, $page, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ServiceResponseWithTotal' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ServiceResponseWithTotal' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ServiceResponseWithTotal', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ServiceResponseWithTotal';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ServiceResponseWithTotal',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEdgeNodeSvcsAsync
     *
     * Return edge-node Services association
     *
     * @param  int $edgenode_id (required)
     * @param  bool $is_bound (optional)
     * @param  string $filter (optional)
     * @param  string $order_by (optional)
     * @param  string $sort (optional)
     * @param  int $page (optional)
     * @param  int $page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEdgeNodeSvcs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEdgeNodeSvcsAsync($edgenode_id, $is_bound = null, $filter = null, $order_by = null, $sort = null, $page = null, $page_size = null, string $contentType = self::contentTypes['getEdgeNodeSvcs'][0])
    {
        return $this->getEdgeNodeSvcsAsyncWithHttpInfo($edgenode_id, $is_bound, $filter, $order_by, $sort, $page, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEdgeNodeSvcsAsyncWithHttpInfo
     *
     * Return edge-node Services association
     *
     * @param  int $edgenode_id (required)
     * @param  bool $is_bound (optional)
     * @param  string $filter (optional)
     * @param  string $order_by (optional)
     * @param  string $sort (optional)
     * @param  int $page (optional)
     * @param  int $page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEdgeNodeSvcs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEdgeNodeSvcsAsyncWithHttpInfo($edgenode_id, $is_bound = null, $filter = null, $order_by = null, $sort = null, $page = null, $page_size = null, string $contentType = self::contentTypes['getEdgeNodeSvcs'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ServiceResponseWithTotal';
        $request = $this->getEdgeNodeSvcsRequest($edgenode_id, $is_bound, $filter, $order_by, $sort, $page, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEdgeNodeSvcs'
     *
     * @param  int $edgenode_id (required)
     * @param  bool $is_bound (optional)
     * @param  string $filter (optional)
     * @param  string $order_by (optional)
     * @param  string $sort (optional)
     * @param  int $page (optional)
     * @param  int $page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEdgeNodeSvcs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEdgeNodeSvcsRequest($edgenode_id, $is_bound = null, $filter = null, $order_by = null, $sort = null, $page = null, $page_size = null, string $contentType = self::contentTypes['getEdgeNodeSvcs'][0])
    {

        // verify the required parameter 'edgenode_id' is set
        if ($edgenode_id === null || (is_array($edgenode_id) && count($edgenode_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $edgenode_id when calling getEdgeNodeSvcs'
            );
        }








        $resourcePath = '/edge_nodes/{edgenodeId}/services';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_bound,
            'is_bound', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'order_by', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($edgenode_id !== null) {
            $resourcePath = str_replace(
                '{' . 'edgenodeId' . '}',
                ObjectSerializer::toPathValue($edgenode_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json; version=3', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEdgeNodes
     *
     * Return edge-nodes
     *
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional)
     * @param  string $sort sort (optional)
     * @param  bool $only_ids only_ids (optional)
     * @param  int $page_size page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEdgeNodes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EdgeNodeResponseWithTotal
     */
    public function getEdgeNodes($filter = null, $order_by = null, $sort = null, $only_ids = null, $page_size = null, string $contentType = self::contentTypes['getEdgeNodes'][0])
    {
        list($response) = $this->getEdgeNodesWithHttpInfo($filter, $order_by, $sort, $only_ids, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation getEdgeNodesWithHttpInfo
     *
     * Return edge-nodes
     *
     * @param  string $filter (optional)
     * @param  string $order_by (optional)
     * @param  string $sort (optional)
     * @param  bool $only_ids (optional)
     * @param  int $page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEdgeNodes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EdgeNodeResponseWithTotal, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEdgeNodesWithHttpInfo($filter = null, $order_by = null, $sort = null, $only_ids = null, $page_size = null, string $contentType = self::contentTypes['getEdgeNodes'][0])
    {
        $request = $this->getEdgeNodesRequest($filter, $order_by, $sort, $only_ids, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EdgeNodeResponseWithTotal' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EdgeNodeResponseWithTotal' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EdgeNodeResponseWithTotal', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EdgeNodeResponseWithTotal';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EdgeNodeResponseWithTotal',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEdgeNodesAsync
     *
     * Return edge-nodes
     *
     * @param  string $filter (optional)
     * @param  string $order_by (optional)
     * @param  string $sort (optional)
     * @param  bool $only_ids (optional)
     * @param  int $page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEdgeNodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEdgeNodesAsync($filter = null, $order_by = null, $sort = null, $only_ids = null, $page_size = null, string $contentType = self::contentTypes['getEdgeNodes'][0])
    {
        return $this->getEdgeNodesAsyncWithHttpInfo($filter, $order_by, $sort, $only_ids, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEdgeNodesAsyncWithHttpInfo
     *
     * Return edge-nodes
     *
     * @param  string $filter (optional)
     * @param  string $order_by (optional)
     * @param  string $sort (optional)
     * @param  bool $only_ids (optional)
     * @param  int $page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEdgeNodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEdgeNodesAsyncWithHttpInfo($filter = null, $order_by = null, $sort = null, $only_ids = null, $page_size = null, string $contentType = self::contentTypes['getEdgeNodes'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EdgeNodeResponseWithTotal';
        $request = $this->getEdgeNodesRequest($filter, $order_by, $sort, $only_ids, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEdgeNodes'
     *
     * @param  string $filter (optional)
     * @param  string $order_by (optional)
     * @param  string $sort (optional)
     * @param  bool $only_ids (optional)
     * @param  int $page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEdgeNodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEdgeNodesRequest($filter = null, $order_by = null, $sort = null, $only_ids = null, $page_size = null, string $contentType = self::contentTypes['getEdgeNodes'][0])
    {







        $resourcePath = '/edge_nodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'order_by', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $only_ids,
            'only_ids', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json; version=3', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEdgeNode
     *
     * Update edge-node
     *
     * @param  int $edgenode_id edgenode_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEdgeNode'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UpdateEdgeNodeResponse
     */
    public function updateEdgeNode($edgenode_id, string $contentType = self::contentTypes['updateEdgeNode'][0])
    {
        list($response) = $this->updateEdgeNodeWithHttpInfo($edgenode_id, $contentType);
        return $response;
    }

    /**
     * Operation updateEdgeNodeWithHttpInfo
     *
     * Update edge-node
     *
     * @param  int $edgenode_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEdgeNode'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UpdateEdgeNodeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEdgeNodeWithHttpInfo($edgenode_id, string $contentType = self::contentTypes['updateEdgeNode'][0])
    {
        $request = $this->updateEdgeNodeRequest($edgenode_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\UpdateEdgeNodeResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UpdateEdgeNodeResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UpdateEdgeNodeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\UpdateEdgeNodeResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UpdateEdgeNodeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEdgeNodeAsync
     *
     * Update edge-node
     *
     * @param  int $edgenode_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEdgeNode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEdgeNodeAsync($edgenode_id, string $contentType = self::contentTypes['updateEdgeNode'][0])
    {
        return $this->updateEdgeNodeAsyncWithHttpInfo($edgenode_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEdgeNodeAsyncWithHttpInfo
     *
     * Update edge-node
     *
     * @param  int $edgenode_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEdgeNode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEdgeNodeAsyncWithHttpInfo($edgenode_id, string $contentType = self::contentTypes['updateEdgeNode'][0])
    {
        $returnType = '\OpenAPI\Client\Model\UpdateEdgeNodeResponse';
        $request = $this->updateEdgeNodeRequest($edgenode_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEdgeNode'
     *
     * @param  int $edgenode_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEdgeNode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEdgeNodeRequest($edgenode_id, string $contentType = self::contentTypes['updateEdgeNode'][0])
    {

        // verify the required parameter 'edgenode_id' is set
        if ($edgenode_id === null || (is_array($edgenode_id) && count($edgenode_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $edgenode_id when calling updateEdgeNode'
            );
        }


        $resourcePath = '/edge_nodes/{edgenodeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($edgenode_id !== null) {
            $resourcePath = str_replace(
                '{' . 'edgenodeId' . '}',
                ObjectSerializer::toPathValue($edgenode_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json; version=3', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEdgeNodeSvcDetail
     *
     * Update edge-node Service association by ID
     *
     * @param  int $edgenode_id edgenode_id (required)
     * @param  int $bind_id bind_id (required)
     * @param  \OpenAPI\Client\Model\UpdateServiceBindRequest $update_service_bind_request update_service_bind_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEdgeNodeSvcDetail'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ServiceBindDetailResponse
     */
    public function updateEdgeNodeSvcDetail($edgenode_id, $bind_id, $update_service_bind_request, string $contentType = self::contentTypes['updateEdgeNodeSvcDetail'][0])
    {
        list($response) = $this->updateEdgeNodeSvcDetailWithHttpInfo($edgenode_id, $bind_id, $update_service_bind_request, $contentType);
        return $response;
    }

    /**
     * Operation updateEdgeNodeSvcDetailWithHttpInfo
     *
     * Update edge-node Service association by ID
     *
     * @param  int $edgenode_id (required)
     * @param  int $bind_id (required)
     * @param  \OpenAPI\Client\Model\UpdateServiceBindRequest $update_service_bind_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEdgeNodeSvcDetail'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ServiceBindDetailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEdgeNodeSvcDetailWithHttpInfo($edgenode_id, $bind_id, $update_service_bind_request, string $contentType = self::contentTypes['updateEdgeNodeSvcDetail'][0])
    {
        $request = $this->updateEdgeNodeSvcDetailRequest($edgenode_id, $bind_id, $update_service_bind_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ServiceBindDetailResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ServiceBindDetailResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ServiceBindDetailResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ServiceBindDetailResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ServiceBindDetailResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEdgeNodeSvcDetailAsync
     *
     * Update edge-node Service association by ID
     *
     * @param  int $edgenode_id (required)
     * @param  int $bind_id (required)
     * @param  \OpenAPI\Client\Model\UpdateServiceBindRequest $update_service_bind_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEdgeNodeSvcDetail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEdgeNodeSvcDetailAsync($edgenode_id, $bind_id, $update_service_bind_request, string $contentType = self::contentTypes['updateEdgeNodeSvcDetail'][0])
    {
        return $this->updateEdgeNodeSvcDetailAsyncWithHttpInfo($edgenode_id, $bind_id, $update_service_bind_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEdgeNodeSvcDetailAsyncWithHttpInfo
     *
     * Update edge-node Service association by ID
     *
     * @param  int $edgenode_id (required)
     * @param  int $bind_id (required)
     * @param  \OpenAPI\Client\Model\UpdateServiceBindRequest $update_service_bind_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEdgeNodeSvcDetail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEdgeNodeSvcDetailAsyncWithHttpInfo($edgenode_id, $bind_id, $update_service_bind_request, string $contentType = self::contentTypes['updateEdgeNodeSvcDetail'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ServiceBindDetailResponse';
        $request = $this->updateEdgeNodeSvcDetailRequest($edgenode_id, $bind_id, $update_service_bind_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEdgeNodeSvcDetail'
     *
     * @param  int $edgenode_id (required)
     * @param  int $bind_id (required)
     * @param  \OpenAPI\Client\Model\UpdateServiceBindRequest $update_service_bind_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEdgeNodeSvcDetail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEdgeNodeSvcDetailRequest($edgenode_id, $bind_id, $update_service_bind_request, string $contentType = self::contentTypes['updateEdgeNodeSvcDetail'][0])
    {

        // verify the required parameter 'edgenode_id' is set
        if ($edgenode_id === null || (is_array($edgenode_id) && count($edgenode_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $edgenode_id when calling updateEdgeNodeSvcDetail'
            );
        }

        // verify the required parameter 'bind_id' is set
        if ($bind_id === null || (is_array($bind_id) && count($bind_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bind_id when calling updateEdgeNodeSvcDetail'
            );
        }

        // verify the required parameter 'update_service_bind_request' is set
        if ($update_service_bind_request === null || (is_array($update_service_bind_request) && count($update_service_bind_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_service_bind_request when calling updateEdgeNodeSvcDetail'
            );
        }


        $resourcePath = '/edge_nodes/{edgenodeId}/services/{bindId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($edgenode_id !== null) {
            $resourcePath = str_replace(
                '{' . 'edgenodeId' . '}',
                ObjectSerializer::toPathValue($edgenode_id),
                $resourcePath
            );
        }
        // path params
        if ($bind_id !== null) {
            $resourcePath = str_replace(
                '{' . 'bindId' . '}',
                ObjectSerializer::toPathValue($bind_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json; version=3', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_service_bind_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_service_bind_request));
            } else {
                $httpBody = $update_service_bind_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
