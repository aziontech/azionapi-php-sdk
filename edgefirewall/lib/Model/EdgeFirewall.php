<?php
/**
 * EdgeFirewall
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Edge Firewall API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EdgeFirewall Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EdgeFirewall implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EdgeFirewall';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'is_active' => 'bool',
        'last_editor' => 'string',
        'last_modified' => 'string',
        'edge_functions_enabled' => 'bool',
        'network_protection_enabled' => 'bool',
        'waf_enabled' => 'bool',
        'debug_rules' => 'bool',
        'domains' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'name' => null,
        'is_active' => null,
        'last_editor' => null,
        'last_modified' => null,
        'edge_functions_enabled' => null,
        'network_protection_enabled' => null,
        'waf_enabled' => null,
        'debug_rules' => null,
        'domains' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'name' => false,
		'is_active' => false,
		'last_editor' => false,
		'last_modified' => false,
		'edge_functions_enabled' => false,
		'network_protection_enabled' => false,
		'waf_enabled' => false,
		'debug_rules' => false,
		'domains' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'is_active' => 'is_active',
        'last_editor' => 'last_editor',
        'last_modified' => 'last_modified',
        'edge_functions_enabled' => 'edge_functions_enabled',
        'network_protection_enabled' => 'network_protection_enabled',
        'waf_enabled' => 'waf_enabled',
        'debug_rules' => 'debug_rules',
        'domains' => 'domains'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'is_active' => 'setIsActive',
        'last_editor' => 'setLastEditor',
        'last_modified' => 'setLastModified',
        'edge_functions_enabled' => 'setEdgeFunctionsEnabled',
        'network_protection_enabled' => 'setNetworkProtectionEnabled',
        'waf_enabled' => 'setWafEnabled',
        'debug_rules' => 'setDebugRules',
        'domains' => 'setDomains'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'is_active' => 'getIsActive',
        'last_editor' => 'getLastEditor',
        'last_modified' => 'getLastModified',
        'edge_functions_enabled' => 'getEdgeFunctionsEnabled',
        'network_protection_enabled' => 'getNetworkProtectionEnabled',
        'waf_enabled' => 'getWafEnabled',
        'debug_rules' => 'getDebugRules',
        'domains' => 'getDomains'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('is_active', $data ?? [], null);
        $this->setIfExists('last_editor', $data ?? [], null);
        $this->setIfExists('last_modified', $data ?? [], null);
        $this->setIfExists('edge_functions_enabled', $data ?? [], null);
        $this->setIfExists('network_protection_enabled', $data ?? [], null);
        $this->setIfExists('waf_enabled', $data ?? [], null);
        $this->setIfExists('debug_rules', $data ?? [], null);
        $this->setIfExists('domains', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool|null
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool|null $is_active is_active
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        if (is_null($is_active)) {
            throw new \InvalidArgumentException('non-nullable is_active cannot be null');
        }
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets last_editor
     *
     * @return string|null
     */
    public function getLastEditor()
    {
        return $this->container['last_editor'];
    }

    /**
     * Sets last_editor
     *
     * @param string|null $last_editor last_editor
     *
     * @return self
     */
    public function setLastEditor($last_editor)
    {
        if (is_null($last_editor)) {
            throw new \InvalidArgumentException('non-nullable last_editor cannot be null');
        }
        $this->container['last_editor'] = $last_editor;

        return $this;
    }

    /**
     * Gets last_modified
     *
     * @return string|null
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     *
     * @param string|null $last_modified last_modified
     *
     * @return self
     */
    public function setLastModified($last_modified)
    {
        if (is_null($last_modified)) {
            throw new \InvalidArgumentException('non-nullable last_modified cannot be null');
        }
        $this->container['last_modified'] = $last_modified;

        return $this;
    }

    /**
     * Gets edge_functions_enabled
     *
     * @return bool|null
     */
    public function getEdgeFunctionsEnabled()
    {
        return $this->container['edge_functions_enabled'];
    }

    /**
     * Sets edge_functions_enabled
     *
     * @param bool|null $edge_functions_enabled edge_functions_enabled
     *
     * @return self
     */
    public function setEdgeFunctionsEnabled($edge_functions_enabled)
    {
        if (is_null($edge_functions_enabled)) {
            throw new \InvalidArgumentException('non-nullable edge_functions_enabled cannot be null');
        }
        $this->container['edge_functions_enabled'] = $edge_functions_enabled;

        return $this;
    }

    /**
     * Gets network_protection_enabled
     *
     * @return bool|null
     */
    public function getNetworkProtectionEnabled()
    {
        return $this->container['network_protection_enabled'];
    }

    /**
     * Sets network_protection_enabled
     *
     * @param bool|null $network_protection_enabled network_protection_enabled
     *
     * @return self
     */
    public function setNetworkProtectionEnabled($network_protection_enabled)
    {
        if (is_null($network_protection_enabled)) {
            throw new \InvalidArgumentException('non-nullable network_protection_enabled cannot be null');
        }
        $this->container['network_protection_enabled'] = $network_protection_enabled;

        return $this;
    }

    /**
     * Gets waf_enabled
     *
     * @return bool|null
     */
    public function getWafEnabled()
    {
        return $this->container['waf_enabled'];
    }

    /**
     * Sets waf_enabled
     *
     * @param bool|null $waf_enabled waf_enabled
     *
     * @return self
     */
    public function setWafEnabled($waf_enabled)
    {
        if (is_null($waf_enabled)) {
            throw new \InvalidArgumentException('non-nullable waf_enabled cannot be null');
        }
        $this->container['waf_enabled'] = $waf_enabled;

        return $this;
    }

    /**
     * Gets debug_rules
     *
     * @return bool|null
     */
    public function getDebugRules()
    {
        return $this->container['debug_rules'];
    }

    /**
     * Sets debug_rules
     *
     * @param bool|null $debug_rules debug_rules
     *
     * @return self
     */
    public function setDebugRules($debug_rules)
    {
        if (is_null($debug_rules)) {
            throw new \InvalidArgumentException('non-nullable debug_rules cannot be null');
        }
        $this->container['debug_rules'] = $debug_rules;

        return $this;
    }

    /**
     * Gets domains
     *
     * @return int[]|null
     */
    public function getDomains()
    {
        return $this->container['domains'];
    }

    /**
     * Sets domains
     *
     * @param int[]|null $domains domains
     *
     * @return self
     */
    public function setDomains($domains)
    {
        if (is_null($domains)) {
            throw new \InvalidArgumentException('non-nullable domains cannot be null');
        }
        $this->container['domains'] = $domains;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


