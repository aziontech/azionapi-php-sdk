<?php
/**
 * WAFApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Web Application Firewall API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * WAFApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WAFApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createNewWAFRuleset' => [
            'application/json; version=3',
        ],
        'deleteWAFRuleset' => [
            'application/json',
        ],
        'getWAFDomains' => [
            'application/json',
        ],
        'getWAFEvents' => [
            'application/json',
        ],
        'getWAFRuleset' => [
            'application/json',
        ],
        'listAllWAF' => [
            'application/json',
        ],
        'listAllWAFRulesets' => [
            'application/json',
        ],
        'updateWAFRuleset' => [
            'application/json; version=3',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createNewWAFRuleset
     *
     * Create a new WAF Rule Set in an account.
     *
     * @param  \OpenAPI\Client\Model\CreateNewWAFRulesetRequest $create_new_waf_ruleset_request create_new_waf_ruleset_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewWAFRuleset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SingleWAF|\OpenAPI\Client\Model\SingleWAF
     */
    public function createNewWAFRuleset($create_new_waf_ruleset_request = null, string $contentType = self::contentTypes['createNewWAFRuleset'][0])
    {
        list($response) = $this->createNewWAFRulesetWithHttpInfo($create_new_waf_ruleset_request, $contentType);
        return $response;
    }

    /**
     * Operation createNewWAFRulesetWithHttpInfo
     *
     * Create a new WAF Rule Set in an account.
     *
     * @param  \OpenAPI\Client\Model\CreateNewWAFRulesetRequest $create_new_waf_ruleset_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewWAFRuleset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SingleWAF|\OpenAPI\Client\Model\SingleWAF, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNewWAFRulesetWithHttpInfo($create_new_waf_ruleset_request = null, string $contentType = self::contentTypes['createNewWAFRuleset'][0])
    {
        $request = $this->createNewWAFRulesetRequest($create_new_waf_ruleset_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SingleWAF' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SingleWAF' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SingleWAF', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\OpenAPI\Client\Model\SingleWAF' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SingleWAF' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SingleWAF', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SingleWAF';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SingleWAF',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SingleWAF',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNewWAFRulesetAsync
     *
     * Create a new WAF Rule Set in an account.
     *
     * @param  \OpenAPI\Client\Model\CreateNewWAFRulesetRequest $create_new_waf_ruleset_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewWAFRuleset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewWAFRulesetAsync($create_new_waf_ruleset_request = null, string $contentType = self::contentTypes['createNewWAFRuleset'][0])
    {
        return $this->createNewWAFRulesetAsyncWithHttpInfo($create_new_waf_ruleset_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNewWAFRulesetAsyncWithHttpInfo
     *
     * Create a new WAF Rule Set in an account.
     *
     * @param  \OpenAPI\Client\Model\CreateNewWAFRulesetRequest $create_new_waf_ruleset_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewWAFRuleset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewWAFRulesetAsyncWithHttpInfo($create_new_waf_ruleset_request = null, string $contentType = self::contentTypes['createNewWAFRuleset'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SingleWAF';
        $request = $this->createNewWAFRulesetRequest($create_new_waf_ruleset_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNewWAFRuleset'
     *
     * @param  \OpenAPI\Client\Model\CreateNewWAFRulesetRequest $create_new_waf_ruleset_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewWAFRuleset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNewWAFRulesetRequest($create_new_waf_ruleset_request = null, string $contentType = self::contentTypes['createNewWAFRuleset'][0])
    {



        $resourcePath = '/waf/rulesets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json; version=3', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_new_waf_ruleset_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_new_waf_ruleset_request));
            } else {
                $httpBody = $create_new_waf_ruleset_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWAFRuleset
     *
     * Remove an WAF Rule Set from an account. Warning: this action cannot be undone.
     *
     * @param  string $waf_rule_set_id waf_rule_set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWAFRuleset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteWAFRuleset($waf_rule_set_id, string $contentType = self::contentTypes['deleteWAFRuleset'][0])
    {
        $this->deleteWAFRulesetWithHttpInfo($waf_rule_set_id, $contentType);
    }

    /**
     * Operation deleteWAFRulesetWithHttpInfo
     *
     * Remove an WAF Rule Set from an account. Warning: this action cannot be undone.
     *
     * @param  string $waf_rule_set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWAFRuleset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWAFRulesetWithHttpInfo($waf_rule_set_id, string $contentType = self::contentTypes['deleteWAFRuleset'][0])
    {
        $request = $this->deleteWAFRulesetRequest($waf_rule_set_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWAFRulesetAsync
     *
     * Remove an WAF Rule Set from an account. Warning: this action cannot be undone.
     *
     * @param  string $waf_rule_set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWAFRuleset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWAFRulesetAsync($waf_rule_set_id, string $contentType = self::contentTypes['deleteWAFRuleset'][0])
    {
        return $this->deleteWAFRulesetAsyncWithHttpInfo($waf_rule_set_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteWAFRulesetAsyncWithHttpInfo
     *
     * Remove an WAF Rule Set from an account. Warning: this action cannot be undone.
     *
     * @param  string $waf_rule_set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWAFRuleset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWAFRulesetAsyncWithHttpInfo($waf_rule_set_id, string $contentType = self::contentTypes['deleteWAFRuleset'][0])
    {
        $returnType = '';
        $request = $this->deleteWAFRulesetRequest($waf_rule_set_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteWAFRuleset'
     *
     * @param  string $waf_rule_set_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWAFRuleset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteWAFRulesetRequest($waf_rule_set_id, string $contentType = self::contentTypes['deleteWAFRuleset'][0])
    {

        // verify the required parameter 'waf_rule_set_id' is set
        if ($waf_rule_set_id === null || (is_array($waf_rule_set_id) && count($waf_rule_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $waf_rule_set_id when calling deleteWAFRuleset'
            );
        }


        $resourcePath = '/waf/rulesets/{waf_rule_set_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($waf_rule_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'waf_rule_set_id' . '}',
                ObjectSerializer::toPathValue($waf_rule_set_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWAFDomains
     *
     * List all domains attached to a Web Application Firewall (WAF) in an account.
     *
     * @param  int $waf_id ID of WAF to return (required)
     * @param  string $name searches WAF for name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWAFDomains'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\WAFDomains200|\OpenAPI\Client\Model\WAFEvents400|\OpenAPI\Client\Model\WAFEvents404
     */
    public function getWAFDomains($waf_id, $name = null, string $contentType = self::contentTypes['getWAFDomains'][0])
    {
        list($response) = $this->getWAFDomainsWithHttpInfo($waf_id, $name, $contentType);
        return $response;
    }

    /**
     * Operation getWAFDomainsWithHttpInfo
     *
     * List all domains attached to a Web Application Firewall (WAF) in an account.
     *
     * @param  int $waf_id ID of WAF to return (required)
     * @param  string $name searches WAF for name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWAFDomains'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\WAFDomains200|\OpenAPI\Client\Model\WAFEvents400|\OpenAPI\Client\Model\WAFEvents404, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWAFDomainsWithHttpInfo($waf_id, $name = null, string $contentType = self::contentTypes['getWAFDomains'][0])
    {
        $request = $this->getWAFDomainsRequest($waf_id, $name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\WAFDomains200' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\WAFDomains200' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\WAFDomains200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\WAFEvents400' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\WAFEvents400' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\WAFEvents400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\WAFEvents404' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\WAFEvents404' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\WAFEvents404', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\WAFDomains200';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WAFDomains200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WAFEvents400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WAFEvents404',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWAFDomainsAsync
     *
     * List all domains attached to a Web Application Firewall (WAF) in an account.
     *
     * @param  int $waf_id ID of WAF to return (required)
     * @param  string $name searches WAF for name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWAFDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWAFDomainsAsync($waf_id, $name = null, string $contentType = self::contentTypes['getWAFDomains'][0])
    {
        return $this->getWAFDomainsAsyncWithHttpInfo($waf_id, $name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWAFDomainsAsyncWithHttpInfo
     *
     * List all domains attached to a Web Application Firewall (WAF) in an account.
     *
     * @param  int $waf_id ID of WAF to return (required)
     * @param  string $name searches WAF for name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWAFDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWAFDomainsAsyncWithHttpInfo($waf_id, $name = null, string $contentType = self::contentTypes['getWAFDomains'][0])
    {
        $returnType = '\OpenAPI\Client\Model\WAFDomains200';
        $request = $this->getWAFDomainsRequest($waf_id, $name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWAFDomains'
     *
     * @param  int $waf_id ID of WAF to return (required)
     * @param  string $name searches WAF for name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWAFDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getWAFDomainsRequest($waf_id, $name = null, string $contentType = self::contentTypes['getWAFDomains'][0])
    {

        // verify the required parameter 'waf_id' is set
        if ($waf_id === null || (is_array($waf_id) && count($waf_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $waf_id when calling getWAFDomains'
            );
        }



        $resourcePath = '/waf/{waf_id}/domains';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($waf_id !== null) {
            $resourcePath = str_replace(
                '{' . 'waf_id' . '}',
                ObjectSerializer::toPathValue($waf_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json; version=3', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWAFEvents
     *
     * Find WAF log events
     *
     * @param  int $waf_id ID of WAF to return (required)
     * @param  int $hour_range Last log hours since now (it must be a integer number ranging between 1 and 72) (required)
     * @param  string $domains_ids Multiple domain&#39;s id (they must be separated by comma like 1233,1234) (required)
     * @param  int $network_list_id Id of a network list (optional)
     * @param  string $sort sort (optional, default to 'asc')
     * @param  int $page page (optional, default to 1)
     * @param  int $page_size page_size (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWAFEvents'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\WAFEvents200|\OpenAPI\Client\Model\WAFEvents400|\OpenAPI\Client\Model\WAFEvents401|\OpenAPI\Client\Model\WAFEvents404
     */
    public function getWAFEvents($waf_id, $hour_range, $domains_ids, $network_list_id = null, $sort = 'asc', $page = 1, $page_size = 10, string $contentType = self::contentTypes['getWAFEvents'][0])
    {
        list($response) = $this->getWAFEventsWithHttpInfo($waf_id, $hour_range, $domains_ids, $network_list_id, $sort, $page, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation getWAFEventsWithHttpInfo
     *
     * Find WAF log events
     *
     * @param  int $waf_id ID of WAF to return (required)
     * @param  int $hour_range Last log hours since now (it must be a integer number ranging between 1 and 72) (required)
     * @param  string $domains_ids Multiple domain&#39;s id (they must be separated by comma like 1233,1234) (required)
     * @param  int $network_list_id Id of a network list (optional)
     * @param  string $sort (optional, default to 'asc')
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWAFEvents'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\WAFEvents200|\OpenAPI\Client\Model\WAFEvents400|\OpenAPI\Client\Model\WAFEvents401|\OpenAPI\Client\Model\WAFEvents404, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWAFEventsWithHttpInfo($waf_id, $hour_range, $domains_ids, $network_list_id = null, $sort = 'asc', $page = 1, $page_size = 10, string $contentType = self::contentTypes['getWAFEvents'][0])
    {
        $request = $this->getWAFEventsRequest($waf_id, $hour_range, $domains_ids, $network_list_id, $sort, $page, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\WAFEvents200' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\WAFEvents200' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\WAFEvents200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\WAFEvents400' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\WAFEvents400' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\WAFEvents400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\WAFEvents401' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\WAFEvents401' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\WAFEvents401', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\WAFEvents404' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\WAFEvents404' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\WAFEvents404', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\WAFEvents200';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WAFEvents200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WAFEvents400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WAFEvents401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WAFEvents404',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWAFEventsAsync
     *
     * Find WAF log events
     *
     * @param  int $waf_id ID of WAF to return (required)
     * @param  int $hour_range Last log hours since now (it must be a integer number ranging between 1 and 72) (required)
     * @param  string $domains_ids Multiple domain&#39;s id (they must be separated by comma like 1233,1234) (required)
     * @param  int $network_list_id Id of a network list (optional)
     * @param  string $sort (optional, default to 'asc')
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWAFEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWAFEventsAsync($waf_id, $hour_range, $domains_ids, $network_list_id = null, $sort = 'asc', $page = 1, $page_size = 10, string $contentType = self::contentTypes['getWAFEvents'][0])
    {
        return $this->getWAFEventsAsyncWithHttpInfo($waf_id, $hour_range, $domains_ids, $network_list_id, $sort, $page, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWAFEventsAsyncWithHttpInfo
     *
     * Find WAF log events
     *
     * @param  int $waf_id ID of WAF to return (required)
     * @param  int $hour_range Last log hours since now (it must be a integer number ranging between 1 and 72) (required)
     * @param  string $domains_ids Multiple domain&#39;s id (they must be separated by comma like 1233,1234) (required)
     * @param  int $network_list_id Id of a network list (optional)
     * @param  string $sort (optional, default to 'asc')
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWAFEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWAFEventsAsyncWithHttpInfo($waf_id, $hour_range, $domains_ids, $network_list_id = null, $sort = 'asc', $page = 1, $page_size = 10, string $contentType = self::contentTypes['getWAFEvents'][0])
    {
        $returnType = '\OpenAPI\Client\Model\WAFEvents200';
        $request = $this->getWAFEventsRequest($waf_id, $hour_range, $domains_ids, $network_list_id, $sort, $page, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWAFEvents'
     *
     * @param  int $waf_id ID of WAF to return (required)
     * @param  int $hour_range Last log hours since now (it must be a integer number ranging between 1 and 72) (required)
     * @param  string $domains_ids Multiple domain&#39;s id (they must be separated by comma like 1233,1234) (required)
     * @param  int $network_list_id Id of a network list (optional)
     * @param  string $sort (optional, default to 'asc')
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWAFEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getWAFEventsRequest($waf_id, $hour_range, $domains_ids, $network_list_id = null, $sort = 'asc', $page = 1, $page_size = 10, string $contentType = self::contentTypes['getWAFEvents'][0])
    {

        // verify the required parameter 'waf_id' is set
        if ($waf_id === null || (is_array($waf_id) && count($waf_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $waf_id when calling getWAFEvents'
            );
        }

        // verify the required parameter 'hour_range' is set
        if ($hour_range === null || (is_array($hour_range) && count($hour_range) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hour_range when calling getWAFEvents'
            );
        }

        // verify the required parameter 'domains_ids' is set
        if ($domains_ids === null || (is_array($domains_ids) && count($domains_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domains_ids when calling getWAFEvents'
            );
        }






        $resourcePath = '/waf/{waf_id}/waf_events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hour_range,
            'hour_range', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $network_list_id,
            'network_list_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $domains_ids,
            'domains_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($waf_id !== null) {
            $resourcePath = str_replace(
                '{' . 'waf_id' . '}',
                ObjectSerializer::toPathValue($waf_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json; version=3', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWAFRuleset
     *
     * List a specific Rule Set associated to a Web Application Firewall (WAF) in an account.
     *
     * @param  int $waf_rule_set_id ID of WAF Ruleset to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWAFRuleset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\WAFSingle200|\OpenAPI\Client\Model\WAFEvents400|\OpenAPI\Client\Model\WAFEvents404
     */
    public function getWAFRuleset($waf_rule_set_id, string $contentType = self::contentTypes['getWAFRuleset'][0])
    {
        list($response) = $this->getWAFRulesetWithHttpInfo($waf_rule_set_id, $contentType);
        return $response;
    }

    /**
     * Operation getWAFRulesetWithHttpInfo
     *
     * List a specific Rule Set associated to a Web Application Firewall (WAF) in an account.
     *
     * @param  int $waf_rule_set_id ID of WAF Ruleset to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWAFRuleset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\WAFSingle200|\OpenAPI\Client\Model\WAFEvents400|\OpenAPI\Client\Model\WAFEvents404, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWAFRulesetWithHttpInfo($waf_rule_set_id, string $contentType = self::contentTypes['getWAFRuleset'][0])
    {
        $request = $this->getWAFRulesetRequest($waf_rule_set_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\WAFSingle200' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\WAFSingle200' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\WAFSingle200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\WAFEvents400' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\WAFEvents400' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\WAFEvents400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\WAFEvents404' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\WAFEvents404' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\WAFEvents404', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\WAFSingle200';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WAFSingle200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WAFEvents400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WAFEvents404',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWAFRulesetAsync
     *
     * List a specific Rule Set associated to a Web Application Firewall (WAF) in an account.
     *
     * @param  int $waf_rule_set_id ID of WAF Ruleset to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWAFRuleset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWAFRulesetAsync($waf_rule_set_id, string $contentType = self::contentTypes['getWAFRuleset'][0])
    {
        return $this->getWAFRulesetAsyncWithHttpInfo($waf_rule_set_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWAFRulesetAsyncWithHttpInfo
     *
     * List a specific Rule Set associated to a Web Application Firewall (WAF) in an account.
     *
     * @param  int $waf_rule_set_id ID of WAF Ruleset to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWAFRuleset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWAFRulesetAsyncWithHttpInfo($waf_rule_set_id, string $contentType = self::contentTypes['getWAFRuleset'][0])
    {
        $returnType = '\OpenAPI\Client\Model\WAFSingle200';
        $request = $this->getWAFRulesetRequest($waf_rule_set_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWAFRuleset'
     *
     * @param  int $waf_rule_set_id ID of WAF Ruleset to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWAFRuleset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getWAFRulesetRequest($waf_rule_set_id, string $contentType = self::contentTypes['getWAFRuleset'][0])
    {

        // verify the required parameter 'waf_rule_set_id' is set
        if ($waf_rule_set_id === null || (is_array($waf_rule_set_id) && count($waf_rule_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $waf_rule_set_id when calling getWAFRuleset'
            );
        }


        $resourcePath = '/waf/rulesets/{waf_rule_set_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($waf_rule_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'waf_rule_set_id' . '}',
                ObjectSerializer::toPathValue($waf_rule_set_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json; version=3', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAllWAF
     *
     * List all Web Application Firewalls (WAFs) created in an account
     *
     * @param  int $page Identifies which page should be returned, if the return is paginated. (optional, default to 1)
     * @param  int $page_size Identifies how many items should be returned per page. (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllWAF'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\WAFList200|\OpenAPI\Client\Model\WAFEvents400|\OpenAPI\Client\Model\WAFEvents404
     */
    public function listAllWAF($page = 1, $page_size = 10, string $contentType = self::contentTypes['listAllWAF'][0])
    {
        list($response) = $this->listAllWAFWithHttpInfo($page, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation listAllWAFWithHttpInfo
     *
     * List all Web Application Firewalls (WAFs) created in an account
     *
     * @param  int $page Identifies which page should be returned, if the return is paginated. (optional, default to 1)
     * @param  int $page_size Identifies how many items should be returned per page. (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllWAF'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\WAFList200|\OpenAPI\Client\Model\WAFEvents400|\OpenAPI\Client\Model\WAFEvents404, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAllWAFWithHttpInfo($page = 1, $page_size = 10, string $contentType = self::contentTypes['listAllWAF'][0])
    {
        $request = $this->listAllWAFRequest($page, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\WAFList200' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\WAFList200' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\WAFList200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\WAFEvents400' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\WAFEvents400' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\WAFEvents400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\WAFEvents404' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\WAFEvents404' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\WAFEvents404', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\WAFList200';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WAFList200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WAFEvents400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WAFEvents404',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAllWAFAsync
     *
     * List all Web Application Firewalls (WAFs) created in an account
     *
     * @param  int $page Identifies which page should be returned, if the return is paginated. (optional, default to 1)
     * @param  int $page_size Identifies how many items should be returned per page. (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllWAF'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAllWAFAsync($page = 1, $page_size = 10, string $contentType = self::contentTypes['listAllWAF'][0])
    {
        return $this->listAllWAFAsyncWithHttpInfo($page, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAllWAFAsyncWithHttpInfo
     *
     * List all Web Application Firewalls (WAFs) created in an account
     *
     * @param  int $page Identifies which page should be returned, if the return is paginated. (optional, default to 1)
     * @param  int $page_size Identifies how many items should be returned per page. (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllWAF'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAllWAFAsyncWithHttpInfo($page = 1, $page_size = 10, string $contentType = self::contentTypes['listAllWAF'][0])
    {
        $returnType = '\OpenAPI\Client\Model\WAFList200';
        $request = $this->listAllWAFRequest($page, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAllWAF'
     *
     * @param  int $page Identifies which page should be returned, if the return is paginated. (optional, default to 1)
     * @param  int $page_size Identifies how many items should be returned per page. (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllWAF'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listAllWAFRequest($page = 1, $page_size = 10, string $contentType = self::contentTypes['listAllWAF'][0])
    {




        $resourcePath = '/waf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json; version=3', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAllWAFRulesets
     *
     * list all Rule Sets associated to a Web Application Firewall (WAF) in an account.
     *
     * @param  string $order_by Identifies which property the return should be sorted by. (optional, default to 'name')
     * @param  string $sort Defines whether objects are shown in ascending or descending order depending on the value set in order_by. (optional, default to 'asc')
     * @param  int $page Identifies which page should be returned, if the return is paginated. (optional, default to 1)
     * @param  int $page_size Identifies how many items should be returned per page. (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllWAFRulesets'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\WAFList200|\OpenAPI\Client\Model\WAFEvents400|\OpenAPI\Client\Model\WAFEvents404
     */
    public function listAllWAFRulesets($order_by = 'name', $sort = 'asc', $page = 1, $page_size = 10, string $contentType = self::contentTypes['listAllWAFRulesets'][0])
    {
        list($response) = $this->listAllWAFRulesetsWithHttpInfo($order_by, $sort, $page, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation listAllWAFRulesetsWithHttpInfo
     *
     * list all Rule Sets associated to a Web Application Firewall (WAF) in an account.
     *
     * @param  string $order_by Identifies which property the return should be sorted by. (optional, default to 'name')
     * @param  string $sort Defines whether objects are shown in ascending or descending order depending on the value set in order_by. (optional, default to 'asc')
     * @param  int $page Identifies which page should be returned, if the return is paginated. (optional, default to 1)
     * @param  int $page_size Identifies how many items should be returned per page. (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllWAFRulesets'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\WAFList200|\OpenAPI\Client\Model\WAFEvents400|\OpenAPI\Client\Model\WAFEvents404, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAllWAFRulesetsWithHttpInfo($order_by = 'name', $sort = 'asc', $page = 1, $page_size = 10, string $contentType = self::contentTypes['listAllWAFRulesets'][0])
    {
        $request = $this->listAllWAFRulesetsRequest($order_by, $sort, $page, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\WAFList200' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\WAFList200' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\WAFList200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\WAFEvents400' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\WAFEvents400' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\WAFEvents400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\WAFEvents404' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\WAFEvents404' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\WAFEvents404', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\WAFList200';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WAFList200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WAFEvents400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WAFEvents404',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAllWAFRulesetsAsync
     *
     * list all Rule Sets associated to a Web Application Firewall (WAF) in an account.
     *
     * @param  string $order_by Identifies which property the return should be sorted by. (optional, default to 'name')
     * @param  string $sort Defines whether objects are shown in ascending or descending order depending on the value set in order_by. (optional, default to 'asc')
     * @param  int $page Identifies which page should be returned, if the return is paginated. (optional, default to 1)
     * @param  int $page_size Identifies how many items should be returned per page. (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllWAFRulesets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAllWAFRulesetsAsync($order_by = 'name', $sort = 'asc', $page = 1, $page_size = 10, string $contentType = self::contentTypes['listAllWAFRulesets'][0])
    {
        return $this->listAllWAFRulesetsAsyncWithHttpInfo($order_by, $sort, $page, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAllWAFRulesetsAsyncWithHttpInfo
     *
     * list all Rule Sets associated to a Web Application Firewall (WAF) in an account.
     *
     * @param  string $order_by Identifies which property the return should be sorted by. (optional, default to 'name')
     * @param  string $sort Defines whether objects are shown in ascending or descending order depending on the value set in order_by. (optional, default to 'asc')
     * @param  int $page Identifies which page should be returned, if the return is paginated. (optional, default to 1)
     * @param  int $page_size Identifies how many items should be returned per page. (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllWAFRulesets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAllWAFRulesetsAsyncWithHttpInfo($order_by = 'name', $sort = 'asc', $page = 1, $page_size = 10, string $contentType = self::contentTypes['listAllWAFRulesets'][0])
    {
        $returnType = '\OpenAPI\Client\Model\WAFList200';
        $request = $this->listAllWAFRulesetsRequest($order_by, $sort, $page, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAllWAFRulesets'
     *
     * @param  string $order_by Identifies which property the return should be sorted by. (optional, default to 'name')
     * @param  string $sort Defines whether objects are shown in ascending or descending order depending on the value set in order_by. (optional, default to 'asc')
     * @param  int $page Identifies which page should be returned, if the return is paginated. (optional, default to 1)
     * @param  int $page_size Identifies how many items should be returned per page. (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllWAFRulesets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listAllWAFRulesetsRequest($order_by = 'name', $sort = 'asc', $page = 1, $page_size = 10, string $contentType = self::contentTypes['listAllWAFRulesets'][0])
    {






        $resourcePath = '/waf/rulesets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'order_by', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json; version=3', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWAFRuleset
     *
     * Change only select settings of a WAF Rule Set
     *
     * @param  string $waf_rule_set_id waf_rule_set_id (required)
     * @param  \OpenAPI\Client\Model\SingleWAF $single_waf single_waf (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWAFRuleset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SingleWAF
     */
    public function updateWAFRuleset($waf_rule_set_id, $single_waf = null, string $contentType = self::contentTypes['updateWAFRuleset'][0])
    {
        list($response) = $this->updateWAFRulesetWithHttpInfo($waf_rule_set_id, $single_waf, $contentType);
        return $response;
    }

    /**
     * Operation updateWAFRulesetWithHttpInfo
     *
     * Change only select settings of a WAF Rule Set
     *
     * @param  string $waf_rule_set_id (required)
     * @param  \OpenAPI\Client\Model\SingleWAF $single_waf (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWAFRuleset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SingleWAF, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWAFRulesetWithHttpInfo($waf_rule_set_id, $single_waf = null, string $contentType = self::contentTypes['updateWAFRuleset'][0])
    {
        $request = $this->updateWAFRulesetRequest($waf_rule_set_id, $single_waf, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SingleWAF' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SingleWAF' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SingleWAF', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SingleWAF';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SingleWAF',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateWAFRulesetAsync
     *
     * Change only select settings of a WAF Rule Set
     *
     * @param  string $waf_rule_set_id (required)
     * @param  \OpenAPI\Client\Model\SingleWAF $single_waf (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWAFRuleset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWAFRulesetAsync($waf_rule_set_id, $single_waf = null, string $contentType = self::contentTypes['updateWAFRuleset'][0])
    {
        return $this->updateWAFRulesetAsyncWithHttpInfo($waf_rule_set_id, $single_waf, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateWAFRulesetAsyncWithHttpInfo
     *
     * Change only select settings of a WAF Rule Set
     *
     * @param  string $waf_rule_set_id (required)
     * @param  \OpenAPI\Client\Model\SingleWAF $single_waf (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWAFRuleset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWAFRulesetAsyncWithHttpInfo($waf_rule_set_id, $single_waf = null, string $contentType = self::contentTypes['updateWAFRuleset'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SingleWAF';
        $request = $this->updateWAFRulesetRequest($waf_rule_set_id, $single_waf, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateWAFRuleset'
     *
     * @param  string $waf_rule_set_id (required)
     * @param  \OpenAPI\Client\Model\SingleWAF $single_waf (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWAFRuleset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateWAFRulesetRequest($waf_rule_set_id, $single_waf = null, string $contentType = self::contentTypes['updateWAFRuleset'][0])
    {

        // verify the required parameter 'waf_rule_set_id' is set
        if ($waf_rule_set_id === null || (is_array($waf_rule_set_id) && count($waf_rule_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $waf_rule_set_id when calling updateWAFRuleset'
            );
        }



        $resourcePath = '/waf/rulesets/{waf_rule_set_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($waf_rule_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'waf_rule_set_id' . '}',
                ObjectSerializer::toPathValue($waf_rule_set_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json; version=3', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($single_waf)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($single_waf));
            } else {
                $httpBody = $single_waf;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
