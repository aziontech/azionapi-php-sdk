<?php
/**
 * S3Credential
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Object Storage
 *
 * REST API OpenAPI documentation for the Object Storage
 *
 * The version of the OpenAPI document: 1.0.0 (v1)
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * S3Credential Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class S3Credential implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'S3Credential';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'access_key' => 'string',
        'secret_key' => 'string',
        'capabilities' => 'string[]',
        'bucket' => 'string',
        'expiration_date' => '\DateTime',
        'created_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'access_key' => null,
        'secret_key' => null,
        'capabilities' => null,
        'bucket' => null,
        'expiration_date' => 'date-time',
        'created_at' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'access_key' => false,
        'secret_key' => false,
        'capabilities' => false,
        'bucket' => false,
        'expiration_date' => false,
        'created_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'access_key' => 'access_key',
        'secret_key' => 'secret_key',
        'capabilities' => 'capabilities',
        'bucket' => 'bucket',
        'expiration_date' => 'expiration_date',
        'created_at' => 'created_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'access_key' => 'setAccessKey',
        'secret_key' => 'setSecretKey',
        'capabilities' => 'setCapabilities',
        'bucket' => 'setBucket',
        'expiration_date' => 'setExpirationDate',
        'created_at' => 'setCreatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'access_key' => 'getAccessKey',
        'secret_key' => 'getSecretKey',
        'capabilities' => 'getCapabilities',
        'bucket' => 'getBucket',
        'expiration_date' => 'getExpirationDate',
        'created_at' => 'getCreatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('access_key', $data ?? [], null);
        $this->setIfExists('secret_key', $data ?? [], null);
        $this->setIfExists('capabilities', $data ?? [], null);
        $this->setIfExists('bucket', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 200)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['name']) && !preg_match("/.*/", $this->container['name'])) {
            $invalidProperties[] = "invalid value for 'name', must be conform to the pattern /.*/.";
        }

        if (!is_null($this->container['access_key']) && (mb_strlen($this->container['access_key']) > 200)) {
            $invalidProperties[] = "invalid value for 'access_key', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['access_key']) && (mb_strlen($this->container['access_key']) < 1)) {
            $invalidProperties[] = "invalid value for 'access_key', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['access_key']) && !preg_match("/.*/", $this->container['access_key'])) {
            $invalidProperties[] = "invalid value for 'access_key', must be conform to the pattern /.*/.";
        }

        if (!is_null($this->container['secret_key']) && (mb_strlen($this->container['secret_key']) > 200)) {
            $invalidProperties[] = "invalid value for 'secret_key', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['secret_key']) && (mb_strlen($this->container['secret_key']) < 1)) {
            $invalidProperties[] = "invalid value for 'secret_key', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['secret_key']) && !preg_match("/.*/", $this->container['secret_key'])) {
            $invalidProperties[] = "invalid value for 'secret_key', must be conform to the pattern /.*/.";
        }

        if (!is_null($this->container['bucket']) && (mb_strlen($this->container['bucket']) > 200)) {
            $invalidProperties[] = "invalid value for 'bucket', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['bucket']) && (mb_strlen($this->container['bucket']) < 1)) {
            $invalidProperties[] = "invalid value for 'bucket', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['bucket']) && !preg_match("/.*/", $this->container['bucket'])) {
            $invalidProperties[] = "invalid value for 'bucket', must be conform to the pattern /.*/.";
        }

        if (!is_null($this->container['expiration_date']) && (mb_strlen($this->container['expiration_date']) > 30)) {
            $invalidProperties[] = "invalid value for 'expiration_date', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['expiration_date']) && (mb_strlen($this->container['expiration_date']) < 10)) {
            $invalidProperties[] = "invalid value for 'expiration_date', the character length must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['expiration_date']) && !preg_match("/.*/", $this->container['expiration_date'])) {
            $invalidProperties[] = "invalid value for 'expiration_date', must be conform to the pattern /.*/.";
        }

        if (!is_null($this->container['created_at']) && (mb_strlen($this->container['created_at']) > 30)) {
            $invalidProperties[] = "invalid value for 'created_at', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['created_at']) && (mb_strlen($this->container['created_at']) < 10)) {
            $invalidProperties[] = "invalid value for 'created_at', the character length must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['created_at']) && !preg_match("/.*/", $this->container['created_at'])) {
            $invalidProperties[] = "invalid value for 'created_at', must be conform to the pattern /.*/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $name when calling S3Credential., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling S3Credential., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/.*/", ObjectSerializer::toString($name)))) {
            throw new \InvalidArgumentException("invalid value for \$name when calling S3Credential., must conform to the pattern /.*/.");
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets access_key
     *
     * @return string|null
     */
    public function getAccessKey()
    {
        return $this->container['access_key'];
    }

    /**
     * Sets access_key
     *
     * @param string|null $access_key access_key
     *
     * @return self
     */
    public function setAccessKey($access_key)
    {
        if (is_null($access_key)) {
            throw new \InvalidArgumentException('non-nullable access_key cannot be null');
        }
        if ((mb_strlen($access_key) > 200)) {
            throw new \InvalidArgumentException('invalid length for $access_key when calling S3Credential., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($access_key) < 1)) {
            throw new \InvalidArgumentException('invalid length for $access_key when calling S3Credential., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/.*/", ObjectSerializer::toString($access_key)))) {
            throw new \InvalidArgumentException("invalid value for \$access_key when calling S3Credential., must conform to the pattern /.*/.");
        }

        $this->container['access_key'] = $access_key;

        return $this;
    }

    /**
     * Gets secret_key
     *
     * @return string|null
     */
    public function getSecretKey()
    {
        return $this->container['secret_key'];
    }

    /**
     * Sets secret_key
     *
     * @param string|null $secret_key secret_key
     *
     * @return self
     */
    public function setSecretKey($secret_key)
    {
        if (is_null($secret_key)) {
            throw new \InvalidArgumentException('non-nullable secret_key cannot be null');
        }
        if ((mb_strlen($secret_key) > 200)) {
            throw new \InvalidArgumentException('invalid length for $secret_key when calling S3Credential., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($secret_key) < 1)) {
            throw new \InvalidArgumentException('invalid length for $secret_key when calling S3Credential., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/.*/", ObjectSerializer::toString($secret_key)))) {
            throw new \InvalidArgumentException("invalid value for \$secret_key when calling S3Credential., must conform to the pattern /.*/.");
        }

        $this->container['secret_key'] = $secret_key;

        return $this;
    }

    /**
     * Gets capabilities
     *
     * @return string[]|null
     */
    public function getCapabilities()
    {
        return $this->container['capabilities'];
    }

    /**
     * Sets capabilities
     *
     * @param string[]|null $capabilities capabilities
     *
     * @return self
     */
    public function setCapabilities($capabilities)
    {
        if (is_null($capabilities)) {
            throw new \InvalidArgumentException('non-nullable capabilities cannot be null');
        }
        $this->container['capabilities'] = $capabilities;

        return $this;
    }

    /**
     * Gets bucket
     *
     * @return string|null
     */
    public function getBucket()
    {
        return $this->container['bucket'];
    }

    /**
     * Sets bucket
     *
     * @param string|null $bucket bucket
     *
     * @return self
     */
    public function setBucket($bucket)
    {
        if (is_null($bucket)) {
            throw new \InvalidArgumentException('non-nullable bucket cannot be null');
        }
        if ((mb_strlen($bucket) > 200)) {
            throw new \InvalidArgumentException('invalid length for $bucket when calling S3Credential., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($bucket) < 1)) {
            throw new \InvalidArgumentException('invalid length for $bucket when calling S3Credential., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/.*/", ObjectSerializer::toString($bucket)))) {
            throw new \InvalidArgumentException("invalid value for \$bucket when calling S3Credential., must conform to the pattern /.*/.");
        }

        $this->container['bucket'] = $bucket;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime|null $expiration_date expiration_date
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        if ((mb_strlen($expiration_date) > 30)) {
            throw new \InvalidArgumentException('invalid length for $expiration_date when calling S3Credential., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($expiration_date) < 10)) {
            throw new \InvalidArgumentException('invalid length for $expiration_date when calling S3Credential., must be bigger than or equal to 10.');
        }
        if ((!preg_match("/.*/", ObjectSerializer::toString($expiration_date)))) {
            throw new \InvalidArgumentException("invalid value for \$expiration_date when calling S3Credential., must conform to the pattern /.*/.");
        }

        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        if ((mb_strlen($created_at) > 30)) {
            throw new \InvalidArgumentException('invalid length for $created_at when calling S3Credential., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($created_at) < 10)) {
            throw new \InvalidArgumentException('invalid length for $created_at when calling S3Credential., must be bigger than or equal to 10.');
        }
        if ((!preg_match("/.*/", ObjectSerializer::toString($created_at)))) {
            throw new \InvalidArgumentException("invalid value for \$created_at when calling S3Credential., must conform to the pattern /.*/.");
        }

        $this->container['created_at'] = $created_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


